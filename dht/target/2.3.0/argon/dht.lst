
/Users/donkushanathalage/Desktop/particle/dht/target/2.3.0/argon/dht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001c64  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5c80  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e51c  000d5c84  0001e51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000268  2003e588  2003e588  0002e588  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5cf0  000d5cf0  00025cf0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5d18  000d5d18  00025d18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0014bbb9  00000000  00000000  00025d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001670f  00000000  00000000  001718d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002a63e  00000000  00000000  00187fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000026b0  00000000  00000000  001b2622  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000073e0  00000000  00000000  001b4cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000377e3  00000000  00000000  001bc0b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00038438  00000000  00000000  001f3895  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00108edb  00000000  00000000  0022bccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006968  00000000  00000000  00334ba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fc6e 	bl	d590e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fc76 	bl	d592a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e51c 	.word	0x2003e51c
   d4048:	000d5c84 	.word	0x000d5c84
   d404c:	2003e588 	.word	0x2003e588
   d4050:	2003e588 	.word	0x2003e588
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fb5f 	bl	d5720 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5c5c 	.word	0x000d5c5c
   d407c:	000d5c80 	.word	0x000d5c80

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b824 	b.w	d40cc <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f845 	bl	d4114 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 baff 	b.w	d5690 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bb6b 	b.w	d476c <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bb69 	b.w	d476c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bb6f 	b.w	d477c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ae:	b40e      	push	{r1, r2, r3}
   d40b0:	b503      	push	{r0, r1, lr}
   d40b2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d40b4:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40b6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d40bc:	f001 f86b 	bl	d5196 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40c0:	b002      	add	sp, #8
   d40c2:	f85d eb04 	ldr.w	lr, [sp], #4
   d40c6:	b003      	add	sp, #12
   d40c8:	4770      	bx	lr
	...

000d40cc <setup>:
int humidity;

DHT dht(DHTPIN, DHTTYPE);

void setup()
{
   d40cc:	b508      	push	{r3, lr}
    dht.begin();
   d40ce:	4805      	ldr	r0, [pc, #20]	; (d40e4 <setup+0x18>)
   d40d0:	f000 f88b 	bl	d41ea <_ZN3DHT5beginEv>
    Serial.begin(9600);
   d40d4:	f001 fa04 	bl	d54e0 <_Z16_fetch_usbserialv>
}
   d40d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.begin(9600);
   d40dc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40e0:	f001 b9f2 	b.w	d54c8 <_ZN9USBSerial5beginEl>
   d40e4:	2003e58c 	.word	0x2003e58c

000d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40e8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d40ea:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d40ec:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d40ee:	b17c      	cbz	r4, d4110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d40f0:	6863      	ldr	r3, [r4, #4]
   d40f2:	3b01      	subs	r3, #1
   d40f4:	6063      	str	r3, [r4, #4]
   d40f6:	b95b      	cbnz	r3, d4110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d40f8:	6823      	ldr	r3, [r4, #0]
   d40fa:	4620      	mov	r0, r4
   d40fc:	689b      	ldr	r3, [r3, #8]
   d40fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4100:	68a3      	ldr	r3, [r4, #8]
   d4102:	3b01      	subs	r3, #1
   d4104:	60a3      	str	r3, [r4, #8]
   d4106:	b91b      	cbnz	r3, d4110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4108:	6823      	ldr	r3, [r4, #0]
   d410a:	4620      	mov	r0, r4
   d410c:	68db      	ldr	r3, [r3, #12]
   d410e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4110:	4628      	mov	r0, r5
   d4112:	bd38      	pop	{r3, r4, r5, pc}

000d4114 <loop>:

void loop()
{
   d4114:	b530      	push	{r4, r5, lr}
    temperature = dht.getTempCelcius();
   d4116:	4823      	ldr	r0, [pc, #140]	; (d41a4 <loop+0x90>)
   d4118:	4d23      	ldr	r5, [pc, #140]	; (d41a8 <loop+0x94>)
    humidity = dht.getHumidity();
   d411a:	4c24      	ldr	r4, [pc, #144]	; (d41ac <loop+0x98>)
{
   d411c:	b089      	sub	sp, #36	; 0x24
    temperature = dht.getTempCelcius();
   d411e:	f000 f921 	bl	d4364 <_ZN3DHT14getTempCelciusEv>
   d4122:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    humidity = dht.getHumidity();
   d4126:	481f      	ldr	r0, [pc, #124]	; (d41a4 <loop+0x90>)
    temperature = dht.getTempCelcius();
   d4128:	ed85 0a00 	vstr	s0, [r5]
    humidity = dht.getHumidity();
   d412c:	f000 f948 	bl	d43c0 <_ZN3DHT11getHumidityEv>
   d4130:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d4134:	ed84 0a00 	vstr	s0, [r4]

    Serial.printlnf("Temp: %d, Hum: %d", temperature, humidity);
   d4138:	f001 f9d2 	bl	d54e0 <_Z16_fetch_usbserialv>
   d413c:	6823      	ldr	r3, [r4, #0]
   d413e:	682a      	ldr	r2, [r5, #0]
   d4140:	491b      	ldr	r1, [pc, #108]	; (d41b0 <loop+0x9c>)
   d4142:	f7ff ffb4 	bl	d40ae <_ZN5Print8printlnfEPKcz>
    Particle.publish("temp", String(temperature), PRIVATE);
   d4146:	6829      	ldr	r1, [r5, #0]
   d4148:	4d1a      	ldr	r5, [pc, #104]	; (d41b4 <loop+0xa0>)
   d414a:	220a      	movs	r2, #10
   d414c:	a804      	add	r0, sp, #16
   d414e:	f001 f8c0 	bl	d52d2 <_ZN6StringC1Eih>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4152:	782b      	ldrb	r3, [r5, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4154:	9a04      	ldr	r2, [sp, #16]
   d4156:	4918      	ldr	r1, [pc, #96]	; (d41b8 <loop+0xa4>)
   d4158:	f88d 3000 	strb.w	r3, [sp]
   d415c:	a802      	add	r0, sp, #8
   d415e:	233c      	movs	r3, #60	; 0x3c
   d4160:	f000 fca4 	bl	d4aac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4164:	a803      	add	r0, sp, #12
   d4166:	f7ff ffbf 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d416a:	a804      	add	r0, sp, #16
   d416c:	f001 f854 	bl	d5218 <_ZN6StringD1Ev>
    Particle.publish("hum", String(humidity), PRIVATE);
   d4170:	6821      	ldr	r1, [r4, #0]
   d4172:	220a      	movs	r2, #10
   d4174:	a804      	add	r0, sp, #16
   d4176:	f001 f8ac 	bl	d52d2 <_ZN6StringC1Eih>
   d417a:	782b      	ldrb	r3, [r5, #0]
   d417c:	9a04      	ldr	r2, [sp, #16]
   d417e:	490f      	ldr	r1, [pc, #60]	; (d41bc <loop+0xa8>)
   d4180:	f88d 3000 	strb.w	r3, [sp]
   d4184:	a802      	add	r0, sp, #8
   d4186:	233c      	movs	r3, #60	; 0x3c
   d4188:	f000 fc90 	bl	d4aac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d418c:	a803      	add	r0, sp, #12
   d418e:	f7ff ffab 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4192:	a804      	add	r0, sp, #16
   d4194:	f001 f840 	bl	d5218 <_ZN6StringD1Ev>
    delay(2000);
   d4198:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d419c:	f000 fb1e 	bl	d47dc <delay>
}
   d41a0:	b009      	add	sp, #36	; 0x24
   d41a2:	bd30      	pop	{r4, r5, pc}
   d41a4:	2003e58c 	.word	0x2003e58c
   d41a8:	2003e5a4 	.word	0x2003e5a4
   d41ac:	2003e5a0 	.word	0x2003e5a0
   d41b0:	000d5ab0 	.word	0x000d5ab0
   d41b4:	2003e588 	.word	0x2003e588
   d41b8:	000d5ac2 	.word	0x000d5ac2
   d41bc:	000d5ac7 	.word	0x000d5ac7

000d41c0 <_GLOBAL__sub_I_temperature>:
        val_(val) {
   d41c0:	4b04      	ldr	r3, [pc, #16]	; (d41d4 <_GLOBAL__sub_I_temperature+0x14>)
DHT dht(DHTPIN, DHTTYPE);
   d41c2:	4805      	ldr	r0, [pc, #20]	; (d41d8 <_GLOBAL__sub_I_temperature+0x18>)
   d41c4:	2201      	movs	r2, #1
   d41c6:	701a      	strb	r2, [r3, #0]
   d41c8:	2105      	movs	r1, #5
   d41ca:	2306      	movs	r3, #6
   d41cc:	220b      	movs	r2, #11
   d41ce:	f000 b805 	b.w	d41dc <_ZN3DHTC1Ehhh>
   d41d2:	bf00      	nop
   d41d4:	2003e588 	.word	0x2003e588
   d41d8:	2003e58c 	.word	0x2003e58c

000d41dc <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "ada_dht.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count)
   d41dc:	b510      	push	{r4, lr}
{
	_pin = pin;
	_type = type;
	_count = count;
   d41de:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d41e0:	2301      	movs	r3, #1
	_pin = pin;
   d41e2:	7181      	strb	r1, [r0, #6]
	_type = type;
   d41e4:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   d41e6:	7403      	strb	r3, [r0, #16]
}
   d41e8:	bd10      	pop	{r4, pc}

000d41ea <_ZN3DHT5beginEv>:

void DHT::begin(void)
{
   d41ea:	b510      	push	{r4, lr}
   d41ec:	4604      	mov	r4, r0
	// set up the pins!
	pinMode(_pin, INPUT);
   d41ee:	2100      	movs	r1, #0
   d41f0:	7980      	ldrb	r0, [r0, #6]
   d41f2:	f001 fb05 	bl	d5800 <pinMode>
	digitalWrite(_pin, HIGH);
   d41f6:	79a0      	ldrb	r0, [r4, #6]
   d41f8:	2101      	movs	r1, #1
   d41fa:	f001 fb12 	bl	d5822 <digitalWrite>
	_lastreadtime = 0;
   d41fe:	2300      	movs	r3, #0
   d4200:	60e3      	str	r3, [r4, #12]
}
   d4202:	bd10      	pop	{r4, pc}

000d4204 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void)
{
   d4204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4208:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d420a:	f000 f8f3 	bl	d43f4 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

	// Check if sensor was read less than two seconds ago and return early
	// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime)
   d420e:	68e3      	ldr	r3, [r4, #12]
   d4210:	4283      	cmp	r3, r0
	{
		// ie there was a rollover
		_lastreadtime = 0;
   d4212:	bf84      	itt	hi
   d4214:	2300      	movhi	r3, #0
   d4216:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000))
   d4218:	7c23      	ldrb	r3, [r4, #16]
   d421a:	b923      	cbnz	r3, d4226 <_ZN3DHT4readEv+0x22>
   d421c:	68e3      	ldr	r3, [r4, #12]
   d421e:	1ac0      	subs	r0, r0, r3
   d4220:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4224:	d367      	bcc.n	d42f6 <_ZN3DHT4readEv+0xf2>
	{
		return true; // return last correct measurement
					 //		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d4226:	2500      	movs	r5, #0
   d4228:	7425      	strb	r5, [r4, #16]
   d422a:	f000 f8e3 	bl	d43f4 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;

	// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   d422e:	2101      	movs	r1, #1
	_lastreadtime = millis();
   d4230:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4232:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   d4234:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d4236:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   d4238:	f001 faf3 	bl	d5822 <digitalWrite>
	delay(250);
   d423c:	20fa      	movs	r0, #250	; 0xfa
   d423e:	f000 facd 	bl	d47dc <delay>

	// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d4242:	79a0      	ldrb	r0, [r4, #6]
   d4244:	2101      	movs	r1, #1
   d4246:	f001 fadb 	bl	d5800 <pinMode>
	digitalWrite(_pin, LOW);
   d424a:	4629      	mov	r1, r5
   d424c:	79a0      	ldrb	r0, [r4, #6]
   d424e:	f001 fae8 	bl	d5822 <digitalWrite>
	delay(20);
   d4252:	2014      	movs	r0, #20
   d4254:	f000 fac2 	bl	d47dc <delay>
	noInterrupts();
   d4258:	f000 fe1a 	bl	d4e90 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   d425c:	2101      	movs	r1, #1
   d425e:	79a0      	ldrb	r0, [r4, #6]
   d4260:	f001 fadf 	bl	d5822 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4264:	2028      	movs	r0, #40	; 0x28
   d4266:	f000 f8bd 	bl	d43e4 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d426a:	79a0      	ldrb	r0, [r4, #6]
   d426c:	4629      	mov	r1, r5
   d426e:	f001 fac7 	bl	d5800 <pinMode>
	uint8_t j = 0, i;
   d4272:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   d4274:	2701      	movs	r7, #1
   d4276:	f04f 0800 	mov.w	r8, #0

	// read in timings
	for (i = 0; i < MAXTIMINGS; i++)
	{
		counter = 0;
		while (digitalRead(_pin) == laststate)
   d427a:	79a0      	ldrb	r0, [r4, #6]
   d427c:	f001 faea 	bl	d5854 <digitalRead>
   d4280:	42b8      	cmp	r0, r7
   d4282:	fa5f f988 	uxtb.w	r9, r8
   d4286:	d108      	bne.n	d429a <_ZN3DHT4readEv+0x96>
   d4288:	2001      	movs	r0, #1
   d428a:	f108 0801 	add.w	r8, r8, #1
   d428e:	f000 f8a9 	bl	d43e4 <HAL_Delay_Microseconds>
		{
			counter++;
			delayMicroseconds(1);
			if (counter == 255)
   d4292:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d4296:	d1f0      	bne.n	d427a <_ZN3DHT4readEv+0x76>
   d4298:	46c1      	mov	r9, r8
			{
				break;
			}
		}
		laststate = digitalRead(_pin);
   d429a:	79a0      	ldrb	r0, [r4, #6]
   d429c:	f001 fada 	bl	d5854 <digitalRead>

		if (counter == 255)
   d42a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   d42a4:	b2c7      	uxtb	r7, r0
		if (counter == 255)
   d42a6:	d014      	beq.n	d42d2 <_ZN3DHT4readEv+0xce>
			break;

		// ignore first 3 transitions
		if ((i >= 4) && (i % 2 == 0))
   d42a8:	2d03      	cmp	r5, #3
   d42aa:	d90e      	bls.n	d42ca <_ZN3DHT4readEv+0xc6>
   d42ac:	07ea      	lsls	r2, r5, #31
   d42ae:	d40c      	bmi.n	d42ca <_ZN3DHT4readEv+0xc6>
		{
			// shove each bit into the storage bytes
			data[j / 8] <<= 1;
   d42b0:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j / 8] |= 1;
			j++;
   d42b2:	3601      	adds	r6, #1
			data[j / 8] <<= 1;
   d42b4:	5ca3      	ldrb	r3, [r4, r2]
   d42b6:	005b      	lsls	r3, r3, #1
   d42b8:	b2db      	uxtb	r3, r3
   d42ba:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d42bc:	7a21      	ldrb	r1, [r4, #8]
   d42be:	4549      	cmp	r1, r9
				data[j / 8] |= 1;
   d42c0:	bf3c      	itt	cc
   d42c2:	f043 0301 	orrcc.w	r3, r3, #1
   d42c6:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d42c8:	b2f6      	uxtb	r6, r6
	for (i = 0; i < MAXTIMINGS; i++)
   d42ca:	3501      	adds	r5, #1
   d42cc:	b2ed      	uxtb	r5, r5
   d42ce:	2d55      	cmp	r5, #85	; 0x55
   d42d0:	d1d1      	bne.n	d4276 <_ZN3DHT4readEv+0x72>
		}
	}

	interrupts();
   d42d2:	f000 fddf 	bl	d4e94 <_Z10interruptsv>
		Serial.print(data[4], HEX); Serial.print(" =? ");
		Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
	*/

	// check we read 40 bits and that the checksum matches
	if ((j >= 40) &&
   d42d6:	2e27      	cmp	r6, #39	; 0x27
   d42d8:	d90f      	bls.n	d42fa <_ZN3DHT4readEv+0xf6>
		(data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)))
   d42da:	7863      	ldrb	r3, [r4, #1]
   d42dc:	7820      	ldrb	r0, [r4, #0]
   d42de:	4418      	add	r0, r3
   d42e0:	78a3      	ldrb	r3, [r4, #2]
   d42e2:	4418      	add	r0, r3
   d42e4:	78e3      	ldrb	r3, [r4, #3]
   d42e6:	4418      	add	r0, r3
   d42e8:	7923      	ldrb	r3, [r4, #4]
   d42ea:	b2c0      	uxtb	r0, r0
	if ((j >= 40) &&
   d42ec:	1ac3      	subs	r3, r0, r3
   d42ee:	4258      	negs	r0, r3
   d42f0:	4158      	adcs	r0, r3
	{
		return true;
	}

	return false;
   d42f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   d42f6:	2001      	movs	r0, #1
   d42f8:	e7fb      	b.n	d42f2 <_ZN3DHT4readEv+0xee>
	return false;
   d42fa:	2000      	movs	r0, #0
   d42fc:	e7f9      	b.n	d42f2 <_ZN3DHT4readEv+0xee>
	...

000d4300 <_ZN3DHT15readTemperatureEv>:
{
   d4300:	b510      	push	{r4, lr}
   d4302:	4604      	mov	r4, r0
	if (read())
   d4304:	f7ff ff7e 	bl	d4204 <_ZN3DHT4readEv>
   d4308:	b320      	cbz	r0, d4354 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type)
   d430a:	79e3      	ldrb	r3, [r4, #7]
   d430c:	2b0b      	cmp	r3, #11
   d430e:	d01b      	beq.n	d4348 <_ZN3DHT15readTemperatureEv+0x48>
   d4310:	3b15      	subs	r3, #21
   d4312:	2b01      	cmp	r3, #1
   d4314:	d81e      	bhi.n	d4354 <_ZN3DHT15readTemperatureEv+0x54>
			f = data[2] & 0x7F;
   d4316:	78a3      	ldrb	r3, [r4, #2]
			f += data[3];
   d4318:	eddf 6a10 	vldr	s13, [pc, #64]	; d435c <_ZN3DHT15readTemperatureEv+0x5c>
			f = data[2] & 0x7F;
   d431c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d4320:	ee07 2a10 	vmov	s14, r2
			f += data[3];
   d4324:	78e2      	ldrb	r2, [r4, #3]
   d4326:	ee07 2a90 	vmov	s15, r2
			f = data[2] & 0x7F;
   d432a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			f += data[3];
   d432e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if (data[2] & 0x80)
   d4332:	061b      	lsls	r3, r3, #24
			f += data[3];
   d4334:	eee7 7a26 	vfma.f32	s15, s14, s13
			f /= 10;
   d4338:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d433c:	ee87 0a87 	vdiv.f32	s0, s15, s14
			if (data[2] & 0x80)
   d4340:	d507      	bpl.n	d4352 <_ZN3DHT15readTemperatureEv+0x52>
				f *= -1;
   d4342:	eeb1 0a40 	vneg.f32	s0, s0
   d4346:	e004      	b.n	d4352 <_ZN3DHT15readTemperatureEv+0x52>
			f = data[2];
   d4348:	78a3      	ldrb	r3, [r4, #2]
   d434a:	ee00 3a10 	vmov	s0, r3
   d434e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   d4352:	bd10      	pop	{r4, pc}
		switch (_type)
   d4354:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4360 <_ZN3DHT15readTemperatureEv+0x60>
   d4358:	e7fb      	b.n	d4352 <_ZN3DHT15readTemperatureEv+0x52>
   d435a:	bf00      	nop
   d435c:	43800000 	.word	0x43800000
   d4360:	7fc00000 	.word	0x7fc00000

000d4364 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   d4364:	f7ff bfcc 	b.w	d4300 <_ZN3DHT15readTemperatureEv>

000d4368 <_ZN3DHT12readHumidityEv>:
{
   d4368:	b510      	push	{r4, lr}
   d436a:	4604      	mov	r4, r0
	if (read())
   d436c:	f7ff ff4a 	bl	d4204 <_ZN3DHT4readEv>
   d4370:	b1f0      	cbz	r0, d43b0 <_ZN3DHT12readHumidityEv+0x48>
		switch (_type)
   d4372:	79e3      	ldrb	r3, [r4, #7]
   d4374:	2b0b      	cmp	r3, #11
   d4376:	d015      	beq.n	d43a4 <_ZN3DHT12readHumidityEv+0x3c>
   d4378:	3b15      	subs	r3, #21
   d437a:	2b01      	cmp	r3, #1
   d437c:	d818      	bhi.n	d43b0 <_ZN3DHT12readHumidityEv+0x48>
			f = data[0];
   d437e:	7823      	ldrb	r3, [r4, #0]
			f += data[1];
   d4380:	eddf 6a0d 	vldr	s13, [pc, #52]	; d43b8 <_ZN3DHT12readHumidityEv+0x50>
			f = data[0];
   d4384:	ee07 3a10 	vmov	s14, r3
			f += data[1];
   d4388:	7863      	ldrb	r3, [r4, #1]
   d438a:	ee07 3a90 	vmov	s15, r3
			f = data[0];
   d438e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
			f += data[1];
   d4392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4396:	eee7 7a26 	vfma.f32	s15, s14, s13
			f /= 10;
   d439a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d439e:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d43a2:	bd10      	pop	{r4, pc}
			f = data[0];
   d43a4:	7823      	ldrb	r3, [r4, #0]
   d43a6:	ee00 3a10 	vmov	s0, r3
   d43aa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
			return f;
   d43ae:	e7f8      	b.n	d43a2 <_ZN3DHT12readHumidityEv+0x3a>
		switch (_type)
   d43b0:	ed9f 0a02 	vldr	s0, [pc, #8]	; d43bc <_ZN3DHT12readHumidityEv+0x54>
   d43b4:	e7f5      	b.n	d43a2 <_ZN3DHT12readHumidityEv+0x3a>
   d43b6:	bf00      	nop
   d43b8:	43800000 	.word	0x43800000
   d43bc:	7fc00000 	.word	0x7fc00000

000d43c0 <_ZN3DHT11getHumidityEv>:
	return readHumidity();
   d43c0:	f7ff bfd2 	b.w	d4368 <_ZN3DHT12readHumidityEv>

000d43c4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <os_mutex_recursive_create+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	00030248 	.word	0x00030248

000d43d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <HAL_RNG_GetRandomNumber+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	685b      	ldr	r3, [r3, #4]
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	00030218 	.word	0x00030218

000d43e4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <HAL_Delay_Microseconds+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	68db      	ldr	r3, [r3, #12]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030218 	.word	0x00030218

000d43f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	695b      	ldr	r3, [r3, #20]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	00030218 	.word	0x00030218

000d4404 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <HAL_Pin_Mode+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	689b      	ldr	r3, [r3, #8]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	0003022c 	.word	0x0003022c

000d4414 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <HAL_Get_Pin_Mode+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	68db      	ldr	r3, [r3, #12]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	0003022c 	.word	0x0003022c

000d4424 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_GPIO_Write+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	691b      	ldr	r3, [r3, #16]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003022c 	.word	0x0003022c

000d4434 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <HAL_GPIO_Read+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	695b      	ldr	r3, [r3, #20]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	0003022c 	.word	0x0003022c

000d4444 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <HAL_Interrupts_Enable_All+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	6a1b      	ldr	r3, [r3, #32]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	0003022c 	.word	0x0003022c

000d4454 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <HAL_Interrupts_Disable_All+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	0003022c 	.word	0x0003022c

000d4464 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <hal_i2c_write+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	6a1b      	ldr	r3, [r3, #32]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030228 	.word	0x00030228

000d4474 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <hal_i2c_available+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030228 	.word	0x00030228

000d4484 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <hal_i2c_read+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030228 	.word	0x00030228

000d4494 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <hal_i2c_peek+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030228 	.word	0x00030228

000d44a4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <hal_i2c_flush+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030228 	.word	0x00030228

000d44b4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <hal_i2c_is_enabled+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030228 	.word	0x00030228

000d44c4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <hal_i2c_init+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030228 	.word	0x00030228

000d44d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <inet_inet_ntop+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	695b      	ldr	r3, [r3, #20]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030264 	.word	0x00030264

000d44e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <netdb_freeaddrinfo+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	689b      	ldr	r3, [r3, #8]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030268 	.word	0x00030268

000d44f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <netdb_getaddrinfo+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	68db      	ldr	r3, [r3, #12]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030268 	.word	0x00030268

000d4504 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <hal_spi_init+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	69db      	ldr	r3, [r3, #28]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030230 	.word	0x00030230

000d4514 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <hal_spi_is_enabled+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	6a1b      	ldr	r3, [r3, #32]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030230 	.word	0x00030230

000d4524 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <hal_usart_init+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	681b      	ldr	r3, [r3, #0]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	0003023c 	.word	0x0003023c

000d4534 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <hal_usart_write+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	68db      	ldr	r3, [r3, #12]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	0003023c 	.word	0x0003023c

000d4544 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <hal_usart_available+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	691b      	ldr	r3, [r3, #16]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	0003023c 	.word	0x0003023c

000d4554 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <hal_usart_read+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	695b      	ldr	r3, [r3, #20]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	0003023c 	.word	0x0003023c

000d4564 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <hal_usart_peek+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	699b      	ldr	r3, [r3, #24]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	0003023c 	.word	0x0003023c

000d4574 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <hal_usart_flush+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	69db      	ldr	r3, [r3, #28]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	0003023c 	.word	0x0003023c

000d4584 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <hal_usart_is_enabled+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	6a1b      	ldr	r3, [r3, #32]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	0003023c 	.word	0x0003023c

000d4594 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <hal_usart_available_data_for_write+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	0003023c 	.word	0x0003023c

000d45a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <HAL_USB_USART_Init+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	681b      	ldr	r3, [r3, #0]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	0003024c 	.word	0x0003024c

000d45b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <HAL_USB_USART_Begin+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	685b      	ldr	r3, [r3, #4]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	0003024c 	.word	0x0003024c

000d45c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <HAL_USB_USART_Available_Data+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	691b      	ldr	r3, [r3, #16]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	0003024c 	.word	0x0003024c

000d45d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	695b      	ldr	r3, [r3, #20]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	0003024c 	.word	0x0003024c

000d45e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_USB_USART_Receive_Data+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	699b      	ldr	r3, [r3, #24]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	0003024c 	.word	0x0003024c

000d45f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_USB_USART_Send_Data+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	69db      	ldr	r3, [r3, #28]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	0003024c 	.word	0x0003024c

000d4604 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_USB_USART_Flush_Data+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	6a1b      	ldr	r3, [r3, #32]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	0003024c 	.word	0x0003024c

000d4614 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <set_system_mode+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	685b      	ldr	r3, [r3, #4]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030220 	.word	0x00030220

000d4624 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <system_delay_ms+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	695b      	ldr	r3, [r3, #20]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030220 	.word	0x00030220

000d4634 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <application_thread_current+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030220 	.word	0x00030220

000d4644 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <application_thread_invoke+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030220 	.word	0x00030220

000d4654 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b03      	ldr	r3, [pc, #12]	; (d4664 <system_ctrl_set_app_request_handler+0x10>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d465e:	9301      	str	r3, [sp, #4]
   d4660:	bd08      	pop	{r3, pc}
   d4662:	0000      	.short	0x0000
   d4664:	00030220 	.word	0x00030220

000d4668 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b03      	ldr	r3, [pc, #12]	; (d4678 <system_ctrl_set_result+0x10>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4672:	9301      	str	r3, [sp, #4]
   d4674:	bd08      	pop	{r3, pc}
   d4676:	0000      	.short	0x0000
   d4678:	00030220 	.word	0x00030220

000d467c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <spark_cloud_flag_connected+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	695b      	ldr	r3, [r3, #20]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	00030244 	.word	0x00030244

000d468c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <spark_send_event+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	6a1b      	ldr	r3, [r3, #32]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	00030244 	.word	0x00030244

000d469c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	00030244 	.word	0x00030244

000d46ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <network_connect+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	685b      	ldr	r3, [r3, #4]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	00030240 	.word	0x00030240

000d46bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <network_connecting+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	689b      	ldr	r3, [r3, #8]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	00030240 	.word	0x00030240

000d46cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <network_disconnect+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	68db      	ldr	r3, [r3, #12]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030240 	.word	0x00030240

000d46dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <network_ready+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	691b      	ldr	r3, [r3, #16]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030240 	.word	0x00030240

000d46ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <network_on+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	695b      	ldr	r3, [r3, #20]
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	00030240 	.word	0x00030240

000d46fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <network_off+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	699b      	ldr	r3, [r3, #24]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	00030240 	.word	0x00030240

000d470c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <network_listen+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	69db      	ldr	r3, [r3, #28]
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030240 	.word	0x00030240

000d471c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <network_listening+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	6a1b      	ldr	r3, [r3, #32]
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030240 	.word	0x00030240

000d472c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <network_set_listen_timeout+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030240 	.word	0x00030240

000d473c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <network_get_listen_timeout+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030240 	.word	0x00030240

000d474c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <network_is_on+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030240 	.word	0x00030240

000d475c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <network_is_off+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030240 	.word	0x00030240

000d476c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <malloc+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	681b      	ldr	r3, [r3, #0]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	0003021c 	.word	0x0003021c

000d477c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <free+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	685b      	ldr	r3, [r3, #4]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	0003021c 	.word	0x0003021c

000d478c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <realloc+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	689b      	ldr	r3, [r3, #8]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	0003021c 	.word	0x0003021c

000d479c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <vsnprintf+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	0003021c 	.word	0x0003021c

000d47ac <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <abort+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	0003021c 	.word	0x0003021c

000d47bc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <_malloc_r+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	0003021c 	.word	0x0003021c

000d47cc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <newlib_impure_ptr_callback+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	0003021c 	.word	0x0003021c

000d47dc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d47dc:	2100      	movs	r1, #0
   d47de:	f7ff bf21 	b.w	d4624 <system_delay_ms>

000d47e2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d47e2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d47e4:	6883      	ldr	r3, [r0, #8]
   d47e6:	4604      	mov	r4, r0
   d47e8:	b90b      	cbnz	r3, d47ee <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d47ea:	f001 f887 	bl	d58fc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d47ee:	68c3      	ldr	r3, [r0, #12]
   d47f0:	4798      	blx	r3
      if (_M_manager)
   d47f2:	68a3      	ldr	r3, [r4, #8]
   d47f4:	b11b      	cbz	r3, d47fe <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d47f6:	2203      	movs	r2, #3
   d47f8:	4621      	mov	r1, r4
   d47fa:	4620      	mov	r0, r4
   d47fc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d47fe:	4620      	mov	r0, r4
   d4800:	2110      	movs	r1, #16
}
   d4802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d4806:	f001 b875 	b.w	d58f4 <_ZdlPvj>

000d480a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d480a:	680b      	ldr	r3, [r1, #0]
   d480c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d480e:	b113      	cbz	r3, d4816 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4810:	685a      	ldr	r2, [r3, #4]
   d4812:	3201      	adds	r2, #1
   d4814:	605a      	str	r2, [r3, #4]
      }
   d4816:	4770      	bx	lr

000d4818 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4818:	4802      	ldr	r0, [pc, #8]	; (d4824 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d481a:	2300      	movs	r3, #0
   d481c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d481e:	f7ff bdd1 	b.w	d43c4 <os_mutex_recursive_create>
   d4822:	bf00      	nop
   d4824:	2003e5a8 	.word	0x2003e5a8

000d4828 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4828:	4770      	bx	lr

000d482a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d482a:	2000      	movs	r0, #0
   d482c:	4770      	bx	lr

000d482e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d482e:	b510      	push	{r4, lr}
   d4830:	2110      	movs	r1, #16
   d4832:	4604      	mov	r4, r0
   d4834:	f001 f85e 	bl	d58f4 <_ZdlPvj>
   d4838:	4620      	mov	r0, r4
   d483a:	bd10      	pop	{r4, pc}

000d483c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d483c:	b508      	push	{r3, lr}
      { delete this; }
   d483e:	f7ff fff6 	bl	d482e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4842:	bd08      	pop	{r3, pc}

000d4844 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4844:	b510      	push	{r4, lr}
      if (_M_manager)
   d4846:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4848:	4604      	mov	r4, r0
      if (_M_manager)
   d484a:	b113      	cbz	r3, d4852 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d484c:	2203      	movs	r2, #3
   d484e:	4601      	mov	r1, r0
   d4850:	4798      	blx	r3
    }
   d4852:	4620      	mov	r0, r4
   d4854:	bd10      	pop	{r4, pc}

000d4856 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4856:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4858:	2200      	movs	r2, #0
   d485a:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d485e:	6002      	str	r2, [r0, #0]
   d4860:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4862:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4864:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4866:	680c      	ldr	r4, [r1, #0]
   d4868:	8085      	strh	r5, [r0, #4]
   d486a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d486c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d486e:	bd30      	pop	{r4, r5, pc}

000d4870 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4870:	b510      	push	{r4, lr}
   d4872:	4604      	mov	r4, r0
    free((void*)msg_);
   d4874:	6800      	ldr	r0, [r0, #0]
   d4876:	f7ff ff81 	bl	d477c <free>
}
   d487a:	4620      	mov	r0, r4
   d487c:	bd10      	pop	{r4, pc}

000d487e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d487e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4880:	68c4      	ldr	r4, [r0, #12]
   d4882:	b1f4      	cbz	r4, d48c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4884:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4886:	2b02      	cmp	r3, #2
   d4888:	d103      	bne.n	d4892 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d488a:	f104 000c 	add.w	r0, r4, #12
   d488e:	f7ff ffef 	bl	d4870 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4892:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4894:	b135      	cbz	r5, d48a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4896:	4628      	mov	r0, r5
   d4898:	f7ff ffd4 	bl	d4844 <_ZNSt14_Function_baseD1Ev>
   d489c:	2110      	movs	r1, #16
   d489e:	4628      	mov	r0, r5
   d48a0:	f001 f828 	bl	d58f4 <_ZdlPvj>
   d48a4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d48a6:	b135      	cbz	r5, d48b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d48a8:	4628      	mov	r0, r5
   d48aa:	f7ff ffcb 	bl	d4844 <_ZNSt14_Function_baseD1Ev>
   d48ae:	2110      	movs	r1, #16
   d48b0:	4628      	mov	r0, r5
   d48b2:	f001 f81f 	bl	d58f4 <_ZdlPvj>
   d48b6:	4620      	mov	r0, r4
   d48b8:	2114      	movs	r1, #20
   d48ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d48be:	f001 b819 	b.w	d58f4 <_ZdlPvj>
   d48c2:	bd38      	pop	{r3, r4, r5, pc}

000d48c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d48c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d48c6:	460e      	mov	r6, r1
   d48c8:	4604      	mov	r4, r0
   d48ca:	f856 3b04 	ldr.w	r3, [r6], #4
   d48ce:	9300      	str	r3, [sp, #0]
   d48d0:	460d      	mov	r5, r1
   d48d2:	a801      	add	r0, sp, #4
   d48d4:	4631      	mov	r1, r6
   d48d6:	f7ff ff98 	bl	d480a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d48da:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d48dc:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d48de:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d48e0:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d48e2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d48e4:	2300      	movs	r3, #0
   d48e6:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d48e8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d48ea:	f7ff fbfd 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d48ee:	4630      	mov	r0, r6
   d48f0:	f7ff fbfa 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d48f4:	4628      	mov	r0, r5
   d48f6:	2108      	movs	r1, #8
   d48f8:	f000 fffc 	bl	d58f4 <_ZdlPvj>
        return p;
    }
   d48fc:	4620      	mov	r0, r4
   d48fe:	b002      	add	sp, #8
   d4900:	bd70      	pop	{r4, r5, r6, pc}

000d4902 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d4902:	b513      	push	{r0, r1, r4, lr}
   d4904:	460b      	mov	r3, r1
   d4906:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4908:	e9d0 0100 	ldrd	r0, r1, [r0]
   d490c:	466c      	mov	r4, sp
   d490e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4912:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4916:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d491a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d491e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4922:	b002      	add	sp, #8
   d4924:	bd10      	pop	{r4, pc}

000d4926 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d4926:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4928:	b510      	push	{r4, lr}
      if (_M_empty())
   d492a:	b90a      	cbnz	r2, d4930 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d492c:	f000 ffe6 	bl	d58fc <_ZSt25__throw_bad_function_callv>
    }
   d4930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4934:	68c3      	ldr	r3, [r0, #12]
   d4936:	4718      	bx	r3

000d4938 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4938:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d493a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d493c:	f100 0110 	add.w	r1, r0, #16
   d4940:	f7ff fff1 	bl	d4926 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4944:	bd08      	pop	{r3, pc}

000d4946 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4946:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4948:	b510      	push	{r4, lr}
      if (_M_empty())
   d494a:	b90a      	cbnz	r2, d4950 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d494c:	f000 ffd6 	bl	d58fc <_ZSt25__throw_bad_function_callv>
    }
   d4950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4954:	68c3      	ldr	r3, [r0, #12]
   d4956:	4718      	bx	r3

000d4958 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4958:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d495a:	6800      	ldr	r0, [r0, #0]
   d495c:	f100 0110 	add.w	r1, r0, #16
   d4960:	f7ff fff1 	bl	d4946 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d4964:	bd08      	pop	{r3, pc}
	...

000d4968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d4968:	b538      	push	{r3, r4, r5, lr}
   d496a:	2300      	movs	r3, #0
   d496c:	4604      	mov	r4, r0
   d496e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4970:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d4972:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4974:	f7ff fb8d 	bl	d4092 <_Znwj>
   d4978:	b128      	cbz	r0, d4986 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d497a:	2301      	movs	r3, #1
   d497c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4980:	4b02      	ldr	r3, [pc, #8]	; (d498c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4982:	6003      	str	r3, [r0, #0]
   d4984:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4986:	6020      	str	r0, [r4, #0]
	}
   d4988:	4620      	mov	r0, r4
   d498a:	bd38      	pop	{r3, r4, r5, pc}
   d498c:	000d5ad4 	.word	0x000d5ad4

000d4990 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d4990:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4992:	2300      	movs	r3, #0
   d4994:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4996:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4998:	4604      	mov	r4, r0
   d499a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d499c:	b12b      	cbz	r3, d49aa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d499e:	2202      	movs	r2, #2
   d49a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d49a2:	68eb      	ldr	r3, [r5, #12]
   d49a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d49a6:	68ab      	ldr	r3, [r5, #8]
   d49a8:	60a3      	str	r3, [r4, #8]
    }
   d49aa:	4620      	mov	r0, r4
   d49ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d49b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d49b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d49b2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d49b4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d49b6:	4668      	mov	r0, sp
   d49b8:	f7ff ff4d 	bl	d4856 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d49bc:	f04f 0302 	mov.w	r3, #2
   d49c0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d49c4:	2a00      	cmp	r2, #0
   d49c6:	d103      	bne.n	d49d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d49c8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d49cc:	2900      	cmp	r1, #0
   d49ce:	d1f7      	bne.n	d49c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d49d0:	d125      	bne.n	d4a1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d49d2:	f104 050c 	add.w	r5, r4, #12
   d49d6:	4669      	mov	r1, sp
   d49d8:	4628      	mov	r0, r5
   d49da:	f7ff ff3c 	bl	d4856 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d49de:	f3bf 8f5b 	dmb	ish
   d49e2:	2301      	movs	r3, #1
   d49e4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d49e6:	2000      	movs	r0, #0
   d49e8:	f104 0308 	add.w	r3, r4, #8
   d49ec:	f3bf 8f5b 	dmb	ish
   d49f0:	e853 6f00 	ldrex	r6, [r3]
   d49f4:	e843 0200 	strex	r2, r0, [r3]
   d49f8:	2a00      	cmp	r2, #0
   d49fa:	d1f9      	bne.n	d49f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d49fc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4a00:	b16e      	cbz	r6, d4a1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d4a02:	f7ff fe17 	bl	d4634 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4a06:	b178      	cbz	r0, d4a28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4a08:	4629      	mov	r1, r5
   d4a0a:	4630      	mov	r0, r6
   d4a0c:	f7ff ff8b 	bl	d4926 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d4a10:	4630      	mov	r0, r6
   d4a12:	f7ff ff17 	bl	d4844 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4a16:	2110      	movs	r1, #16
   d4a18:	4630      	mov	r0, r6
   d4a1a:	f000 ff6b 	bl	d58f4 <_ZdlPvj>
        p_->setError(std::move(error));
   d4a1e:	4668      	mov	r0, sp
   d4a20:	f7ff ff26 	bl	d4870 <_ZN8particle5ErrorD1Ev>
    }
   d4a24:	b009      	add	sp, #36	; 0x24
   d4a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4a28:	4631      	mov	r1, r6
   d4a2a:	a802      	add	r0, sp, #8
   d4a2c:	f7ff ffb0 	bl	d4990 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4a30:	68e0      	ldr	r0, [r4, #12]
   d4a32:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4a36:	b108      	cbz	r0, d4a3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d4a38:	f000 ffa4 	bl	d5984 <strdup>
        type_(type) {
   d4a3c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4a3e:	2010      	movs	r0, #16
   d4a40:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4a44:	f7ff fb25 	bl	d4092 <_Znwj>
   d4a48:	4605      	mov	r5, r0
   d4a4a:	b1e8      	cbz	r0, d4a88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d4a4c:	2700      	movs	r7, #0
   d4a4e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a50:	2018      	movs	r0, #24
   d4a52:	f7ff fb1e 	bl	d4092 <_Znwj>
   d4a56:	4604      	mov	r4, r0
   d4a58:	b188      	cbz	r0, d4a7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d4a5a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d4a5c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4a5e:	a802      	add	r0, sp, #8
   d4a60:	f7ff ff4f 	bl	d4902 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a64:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4a66:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a68:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a6a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4a6c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4a6e:	a906      	add	r1, sp, #24
   d4a70:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4a72:	60e3      	str	r3, [r4, #12]
   d4a74:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d4a78:	9205      	str	r2, [sp, #20]
   d4a7a:	f7ff feec 	bl	d4856 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d4a7e:	4b08      	ldr	r3, [pc, #32]	; (d4aa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d4a80:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4a82:	4b08      	ldr	r3, [pc, #32]	; (d4aa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a84:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4a86:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d4a88:	a806      	add	r0, sp, #24
   d4a8a:	f7ff fef1 	bl	d4870 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4a8e:	a802      	add	r0, sp, #8
   d4a90:	f7ff fed8 	bl	d4844 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4a94:	2200      	movs	r2, #0
   d4a96:	4629      	mov	r1, r5
   d4a98:	4803      	ldr	r0, [pc, #12]	; (d4aa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d4a9a:	f7ff fdd3 	bl	d4644 <application_thread_invoke>
   d4a9e:	e7b7      	b.n	d4a10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d4aa0:	000d4939 	.word	0x000d4939
   d4aa4:	000d4bd1 	.word	0x000d4bd1
   d4aa8:	000d47e3 	.word	0x000d47e3

000d4aac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4ab0:	b08a      	sub	sp, #40	; 0x28
   d4ab2:	4605      	mov	r5, r0
   d4ab4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d4ab8:	460c      	mov	r4, r1
   d4aba:	4617      	mov	r7, r2
   d4abc:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4abe:	f7ff fddd 	bl	d467c <spark_cloud_flag_connected>
   d4ac2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d4ac4:	4682      	mov	sl, r0
   d4ac6:	bb38      	cbnz	r0, d4b18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d4ac8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4acc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4ace:	a905      	add	r1, sp, #20
   d4ad0:	4630      	mov	r0, r6
   d4ad2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4ad6:	f7ff febe 	bl	d4856 <_ZN8particle5ErrorC1EOS0_>
   d4ada:	2014      	movs	r0, #20
   d4adc:	f7ff fad9 	bl	d4092 <_Znwj>
   d4ae0:	4604      	mov	r4, r0
   d4ae2:	b148      	cbz	r0, d4af8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4ae4:	2302      	movs	r3, #2
   d4ae6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4ae8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4aea:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4aee:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d4af0:	4631      	mov	r1, r6
   d4af2:	300c      	adds	r0, #12
   d4af4:	f7ff feaf 	bl	d4856 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4af8:	4628      	mov	r0, r5
	: __shared_count(__p)
   d4afa:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4afc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d4b00:	f7ff ff32 	bl	d4968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4b04:	4630      	mov	r0, r6
   d4b06:	f7ff feb3 	bl	d4870 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4b0a:	a805      	add	r0, sp, #20
   d4b0c:	f7ff feb0 	bl	d4870 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d4b10:	4628      	mov	r0, r5
   d4b12:	b00a      	add	sp, #40	; 0x28
   d4b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4b18:	230c      	movs	r3, #12
   d4b1a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4b1e:	2014      	movs	r0, #20
   d4b20:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d4b24:	9307      	str	r3, [sp, #28]
   d4b26:	f7ff fab4 	bl	d4092 <_Znwj>
   d4b2a:	4601      	mov	r1, r0
   d4b2c:	b128      	cbz	r0, d4b3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4b2e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d4b32:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4b36:	f880 a001 	strb.w	sl, [r0, #1]
   d4b3a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4b3c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d4b3e:	f7ff ff13 	bl	d4968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d4b42:	4b22      	ldr	r3, [pc, #136]	; (d4bcc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d4b44:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4b46:	2008      	movs	r0, #8
   d4b48:	f7ff faa3 	bl	d4092 <_Znwj>
   d4b4c:	4682      	mov	sl, r0
   d4b4e:	b128      	cbz	r0, d4b5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b50:	9b03      	ldr	r3, [sp, #12]
   d4b52:	f840 3b04 	str.w	r3, [r0], #4
   d4b56:	a904      	add	r1, sp, #16
   d4b58:	f7ff fe57 	bl	d480a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4b5c:	9600      	str	r6, [sp, #0]
   d4b5e:	fa5f f389 	uxtb.w	r3, r9
   d4b62:	4642      	mov	r2, r8
   d4b64:	4639      	mov	r1, r7
   d4b66:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d4b68:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4b6c:	f7ff fd8e 	bl	d468c <spark_send_event>
   d4b70:	b9b8      	cbnz	r0, d4ba2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d4b72:	9b03      	ldr	r3, [sp, #12]
   d4b74:	785b      	ldrb	r3, [r3, #1]
   d4b76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4b7a:	b993      	cbnz	r3, d4ba2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d4b7c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d4b80:	a905      	add	r1, sp, #20
   d4b82:	a803      	add	r0, sp, #12
   d4b84:	9205      	str	r2, [sp, #20]
   d4b86:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4b8a:	f7ff ff11 	bl	d49b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4b8e:	a805      	add	r0, sp, #20
   d4b90:	f7ff fe6e 	bl	d4870 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4b94:	a805      	add	r0, sp, #20
   d4b96:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4b98:	f7ff fe94 	bl	d48c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d4b9c:	a806      	add	r0, sp, #24
   d4b9e:	f7ff faa3 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4ba2:	9b03      	ldr	r3, [sp, #12]
   d4ba4:	9305      	str	r3, [sp, #20]
   d4ba6:	a904      	add	r1, sp, #16
   d4ba8:	a806      	add	r0, sp, #24
   d4baa:	f7ff fe2e 	bl	d480a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4bae:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4bb0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4bb2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d4bb4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d4bb6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d4bb8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d4bba:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d4bbc:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d4bbe:	f7ff fa93 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bc2:	a804      	add	r0, sp, #16
   d4bc4:	f7ff fa90 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d4bc8:	e7a2      	b.n	d4b10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d4bca:	bf00      	nop
   d4bcc:	000d4c95 	.word	0x000d4c95

000d4bd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d4bd0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4bd4:	4605      	mov	r5, r0
	  switch (__op)
   d4bd6:	d007      	beq.n	d4be8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d4bd8:	2a03      	cmp	r2, #3
   d4bda:	d018      	beq.n	d4c0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d4bdc:	2a01      	cmp	r2, #1
   d4bde:	d101      	bne.n	d4be4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4be0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4be2:	6003      	str	r3, [r0, #0]
	}
   d4be4:	2000      	movs	r0, #0
   d4be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4be8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d4bea:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4bec:	f7ff fa51 	bl	d4092 <_Znwj>
   d4bf0:	4604      	mov	r4, r0
   d4bf2:	b150      	cbz	r0, d4c0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4bf4:	4631      	mov	r1, r6
   d4bf6:	f7ff fecb 	bl	d4990 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4bfa:	6930      	ldr	r0, [r6, #16]
   d4bfc:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4c00:	b108      	cbz	r0, d4c06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d4c02:	f000 febf 	bl	d5984 <strdup>
        type_(type) {
   d4c06:	6120      	str	r0, [r4, #16]
   d4c08:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d4c0a:	602c      	str	r4, [r5, #0]
	}
   d4c0c:	e7ea      	b.n	d4be4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4c0e:	6804      	ldr	r4, [r0, #0]
   d4c10:	2c00      	cmp	r4, #0
   d4c12:	d0e7      	beq.n	d4be4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d4c14:	f104 0010 	add.w	r0, r4, #16
   d4c18:	f7ff fe2a 	bl	d4870 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4c1c:	4620      	mov	r0, r4
   d4c1e:	f7ff fe11 	bl	d4844 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4c22:	2118      	movs	r1, #24
   d4c24:	4620      	mov	r0, r4
   d4c26:	f000 fe65 	bl	d58f4 <_ZdlPvj>
   d4c2a:	e7db      	b.n	d4be4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d4c2c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d4c2c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4c2e:	2300      	movs	r3, #0
   d4c30:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4c32:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4c34:	4604      	mov	r4, r0
   d4c36:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4c38:	b12b      	cbz	r3, d4c46 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4c3a:	2202      	movs	r2, #2
   d4c3c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4c3e:	68eb      	ldr	r3, [r5, #12]
   d4c40:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4c42:	68ab      	ldr	r3, [r5, #8]
   d4c44:	60a3      	str	r3, [r4, #8]
    }
   d4c46:	4620      	mov	r0, r4
   d4c48:	bd38      	pop	{r3, r4, r5, pc}

000d4c4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d4c4a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4c4c:	b570      	push	{r4, r5, r6, lr}
   d4c4e:	4604      	mov	r4, r0
	  switch (__op)
   d4c50:	d007      	beq.n	d4c62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d4c52:	2a03      	cmp	r2, #3
   d4c54:	d012      	beq.n	d4c7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d4c56:	2a01      	cmp	r2, #1
   d4c58:	d101      	bne.n	d4c5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4c5a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4c5c:	6003      	str	r3, [r0, #0]
	}
   d4c5e:	2000      	movs	r0, #0
   d4c60:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4c62:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d4c64:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4c66:	f7ff fa14 	bl	d4092 <_Znwj>
   d4c6a:	4605      	mov	r5, r0
   d4c6c:	b120      	cbz	r0, d4c78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d4c6e:	4631      	mov	r1, r6
   d4c70:	f7ff ffdc 	bl	d4c2c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4c74:	7c33      	ldrb	r3, [r6, #16]
   d4c76:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d4c78:	6025      	str	r5, [r4, #0]
	}
   d4c7a:	e7f0      	b.n	d4c5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4c7c:	6804      	ldr	r4, [r0, #0]
   d4c7e:	2c00      	cmp	r4, #0
   d4c80:	d0ed      	beq.n	d4c5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d4c82:	4620      	mov	r0, r4
   d4c84:	f7ff fdde 	bl	d4844 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4c88:	2114      	movs	r1, #20
   d4c8a:	4620      	mov	r0, r4
   d4c8c:	f000 fe32 	bl	d58f4 <_ZdlPvj>
   d4c90:	e7e5      	b.n	d4c5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d4c94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4c94:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c96:	b089      	sub	sp, #36	; 0x24
   d4c98:	4604      	mov	r4, r0
   d4c9a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4c9c:	a801      	add	r0, sp, #4
   d4c9e:	4611      	mov	r1, r2
   d4ca0:	f7ff fe10 	bl	d48c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4ca4:	b1a4      	cbz	r4, d4cd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4ca6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4ca8:	b11d      	cbz	r5, d4cb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d4caa:	4628      	mov	r0, r5
   d4cac:	f000 fe6a 	bl	d5984 <strdup>
   d4cb0:	4605      	mov	r5, r0
   d4cb2:	a801      	add	r0, sp, #4
   d4cb4:	a903      	add	r1, sp, #12
        type_(type) {
   d4cb6:	9503      	str	r5, [sp, #12]
   d4cb8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d4cbc:	f7ff fe78 	bl	d49b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4cc0:	a803      	add	r0, sp, #12
   d4cc2:	f7ff fdd5 	bl	d4870 <_ZN8particle5ErrorD1Ev>
   d4cc6:	a802      	add	r0, sp, #8
   d4cc8:	f7ff fa0e 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4ccc:	b009      	add	sp, #36	; 0x24
   d4cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4cd0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4cd2:	2301      	movs	r3, #1
   d4cd4:	e8d5 2f4f 	ldrexb	r2, [r5]
   d4cd8:	2a00      	cmp	r2, #0
   d4cda:	d103      	bne.n	d4ce4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d4cdc:	e8c5 3f41 	strexb	r1, r3, [r5]
   d4ce0:	2900      	cmp	r1, #0
   d4ce2:	d1f7      	bne.n	d4cd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d4ce4:	d1ef      	bne.n	d4cc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d4ce6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d4ce8:	f3bf 8f5b 	dmb	ish
   d4cec:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4cee:	1d2b      	adds	r3, r5, #4
   d4cf0:	f3bf 8f5b 	dmb	ish
   d4cf4:	e853 6f00 	ldrex	r6, [r3]
   d4cf8:	e843 4200 	strex	r2, r4, [r3]
   d4cfc:	2a00      	cmp	r2, #0
   d4cfe:	d1f9      	bne.n	d4cf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d4d00:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4d04:	2e00      	cmp	r6, #0
   d4d06:	d0de      	beq.n	d4cc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d4d08:	4620      	mov	r0, r4
   d4d0a:	f7ff fc93 	bl	d4634 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4d0e:	4607      	mov	r7, r0
   d4d10:	b160      	cbz	r0, d4d2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4d12:	f105 010c 	add.w	r1, r5, #12
   d4d16:	4630      	mov	r0, r6
   d4d18:	f7ff fe15 	bl	d4946 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d4d1c:	4630      	mov	r0, r6
   d4d1e:	f7ff fd91 	bl	d4844 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4d22:	2110      	movs	r1, #16
   d4d24:	4630      	mov	r0, r6
   d4d26:	f000 fde5 	bl	d58f4 <_ZdlPvj>
   d4d2a:	e7cc      	b.n	d4cc6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4d2c:	4631      	mov	r1, r6
   d4d2e:	a803      	add	r0, sp, #12
   d4d30:	f7ff ff7c 	bl	d4c2c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4d34:	7b2b      	ldrb	r3, [r5, #12]
   d4d36:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4d3a:	2010      	movs	r0, #16
   d4d3c:	f7ff f9a9 	bl	d4092 <_Znwj>
   d4d40:	4605      	mov	r5, r0
   d4d42:	b1d0      	cbz	r0, d4d7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d4d44:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d46:	2014      	movs	r0, #20
   d4d48:	f7ff f9a3 	bl	d4092 <_Znwj>
   d4d4c:	4604      	mov	r4, r0
   d4d4e:	b178      	cbz	r0, d4d70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d4d50:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4d52:	4601      	mov	r1, r0
   d4d54:	a803      	add	r0, sp, #12
   d4d56:	f7ff fdd4 	bl	d4902 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d5a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4d5c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d5e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d60:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d4d62:	9205      	str	r2, [sp, #20]
   d4d64:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d66:	60e3      	str	r3, [r4, #12]
   d4d68:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d4d6c:	9206      	str	r2, [sp, #24]
   d4d6e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d4d70:	4b06      	ldr	r3, [pc, #24]	; (d4d8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d4d72:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4d74:	4b06      	ldr	r3, [pc, #24]	; (d4d90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d76:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4d78:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d4d7a:	a803      	add	r0, sp, #12
   d4d7c:	f7ff fd62 	bl	d4844 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4d80:	2200      	movs	r2, #0
   d4d82:	4629      	mov	r1, r5
   d4d84:	4803      	ldr	r0, [pc, #12]	; (d4d94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d4d86:	f7ff fc5d 	bl	d4644 <application_thread_invoke>
   d4d8a:	e7c7      	b.n	d4d1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d4d8c:	000d4959 	.word	0x000d4959
   d4d90:	000d4c4b 	.word	0x000d4c4b
   d4d94:	000d47e3 	.word	0x000d47e3

000d4d98 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d98:	2200      	movs	r2, #0
   d4d9a:	6840      	ldr	r0, [r0, #4]
   d4d9c:	4611      	mov	r1, r2
   d4d9e:	f7ff bcbd 	b.w	d471c <network_listening>

000d4da2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4da2:	2200      	movs	r2, #0
   d4da4:	6840      	ldr	r0, [r0, #4]
   d4da6:	4611      	mov	r1, r2
   d4da8:	f7ff bcc8 	b.w	d473c <network_get_listen_timeout>

000d4dac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4dac:	6840      	ldr	r0, [r0, #4]
   d4dae:	2200      	movs	r2, #0
   d4db0:	f7ff bcbc 	b.w	d472c <network_set_listen_timeout>

000d4db4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4db4:	6840      	ldr	r0, [r0, #4]
   d4db6:	2200      	movs	r2, #0
   d4db8:	f081 0101 	eor.w	r1, r1, #1
   d4dbc:	f7ff bca6 	b.w	d470c <network_listen>

000d4dc0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4dc0:	2300      	movs	r3, #0
   d4dc2:	6840      	ldr	r0, [r0, #4]
   d4dc4:	461a      	mov	r2, r3
   d4dc6:	4619      	mov	r1, r3
   d4dc8:	f7ff bc98 	b.w	d46fc <network_off>

000d4dcc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4dcc:	2300      	movs	r3, #0
   d4dce:	6840      	ldr	r0, [r0, #4]
   d4dd0:	461a      	mov	r2, r3
   d4dd2:	4619      	mov	r1, r3
   d4dd4:	f7ff bc8a 	b.w	d46ec <network_on>

000d4dd8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4dd8:	2200      	movs	r2, #0
   d4dda:	6840      	ldr	r0, [r0, #4]
   d4ddc:	4611      	mov	r1, r2
   d4dde:	f7ff bc7d 	b.w	d46dc <network_ready>

000d4de2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4de2:	2200      	movs	r2, #0
   d4de4:	6840      	ldr	r0, [r0, #4]
   d4de6:	4611      	mov	r1, r2
   d4de8:	f7ff bc68 	b.w	d46bc <network_connecting>

000d4dec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4dec:	6840      	ldr	r0, [r0, #4]
   d4dee:	2200      	movs	r2, #0
   d4df0:	2102      	movs	r1, #2
   d4df2:	f7ff bc6b 	b.w	d46cc <network_disconnect>

000d4df6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4df6:	2300      	movs	r3, #0
   d4df8:	6840      	ldr	r0, [r0, #4]
   d4dfa:	461a      	mov	r2, r3
   d4dfc:	f7ff bc56 	b.w	d46ac <network_connect>

000d4e00 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4e00:	4b02      	ldr	r3, [pc, #8]	; (d4e0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4e02:	2203      	movs	r2, #3
   d4e04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4e06:	4a02      	ldr	r2, [pc, #8]	; (d4e10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4e08:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4e0a:	4770      	bx	lr
   d4e0c:	2003e5ac 	.word	0x2003e5ac
   d4e10:	000d5af0 	.word	0x000d5af0

000d4e14 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4e14:	4770      	bx	lr

000d4e16 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e18:	4606      	mov	r6, r0
   d4e1a:	4615      	mov	r5, r2
   d4e1c:	460c      	mov	r4, r1
   d4e1e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4e20:	42bc      	cmp	r4, r7
   d4e22:	d006      	beq.n	d4e32 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4e24:	6833      	ldr	r3, [r6, #0]
   d4e26:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4e2a:	689b      	ldr	r3, [r3, #8]
   d4e2c:	4630      	mov	r0, r6
   d4e2e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4e30:	e7f6      	b.n	d4e20 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4e32:	4628      	mov	r0, r5
   d4e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e36 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4e36:	7c00      	ldrb	r0, [r0, #16]
   d4e38:	2200      	movs	r2, #0
   d4e3a:	f7ff bb13 	b.w	d4464 <hal_i2c_write>

000d4e3e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4e3e:	7c00      	ldrb	r0, [r0, #16]
   d4e40:	2100      	movs	r1, #0
   d4e42:	f7ff bb17 	b.w	d4474 <hal_i2c_available>

000d4e46 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4e46:	7c00      	ldrb	r0, [r0, #16]
   d4e48:	2100      	movs	r1, #0
   d4e4a:	f7ff bb1b 	b.w	d4484 <hal_i2c_read>

000d4e4e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4e4e:	7c00      	ldrb	r0, [r0, #16]
   d4e50:	2100      	movs	r1, #0
   d4e52:	f7ff bb1f 	b.w	d4494 <hal_i2c_peek>

000d4e56 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4e56:	7c00      	ldrb	r0, [r0, #16]
   d4e58:	2100      	movs	r1, #0
   d4e5a:	f7ff bb23 	b.w	d44a4 <hal_i2c_flush>

000d4e5e <_ZN7TwoWireD0Ev>:
   d4e5e:	b510      	push	{r4, lr}
   d4e60:	2114      	movs	r1, #20
   d4e62:	4604      	mov	r4, r0
   d4e64:	f000 fd46 	bl	d58f4 <_ZdlPvj>
   d4e68:	4620      	mov	r0, r4
   d4e6a:	bd10      	pop	{r4, pc}

000d4e6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4e6c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e72:	4604      	mov	r4, r0
   d4e74:	4608      	mov	r0, r1
   d4e76:	2100      	movs	r1, #0
   d4e78:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4e7c:	4b03      	ldr	r3, [pc, #12]	; (d4e8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4e7e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4e80:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4e82:	4611      	mov	r1, r2
   d4e84:	f7ff fb1e 	bl	d44c4 <hal_i2c_init>
}
   d4e88:	4620      	mov	r0, r4
   d4e8a:	bd10      	pop	{r4, pc}
   d4e8c:	000d5b2c 	.word	0x000d5b2c

000d4e90 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d4e90:	f7ff bae0 	b.w	d4454 <HAL_Interrupts_Disable_All>

000d4e94 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d4e94:	f7ff bad6 	b.w	d4444 <HAL_Interrupts_Enable_All>

000d4e98 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4e98:	4770      	bx	lr

000d4e9a <_ZN9IPAddressD0Ev>:
   d4e9a:	b510      	push	{r4, lr}
   d4e9c:	2118      	movs	r1, #24
   d4e9e:	4604      	mov	r4, r0
   d4ea0:	f000 fd28 	bl	d58f4 <_ZdlPvj>
   d4ea4:	4620      	mov	r0, r4
   d4ea6:	bd10      	pop	{r4, pc}

000d4ea8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4eaa:	7d03      	ldrb	r3, [r0, #20]
   d4eac:	2b06      	cmp	r3, #6
{
   d4eae:	b08d      	sub	sp, #52	; 0x34
   d4eb0:	460e      	mov	r6, r1
   d4eb2:	f100 0704 	add.w	r7, r0, #4
   d4eb6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4eba:	d012      	beq.n	d4ee2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d4ebc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4ec0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4ec4:	220a      	movs	r2, #10
   d4ec6:	4630      	mov	r0, r6
   d4ec8:	f000 f947 	bl	d515a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ecc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ece:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4ed0:	d019      	beq.n	d4f06 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4ed2:	2c00      	cmp	r4, #0
   d4ed4:	d0f4      	beq.n	d4ec0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4ed6:	212e      	movs	r1, #46	; 0x2e
   d4ed8:	4630      	mov	r0, r6
   d4eda:	f000 f92f 	bl	d513c <_ZN5Print5printEc>
   d4ede:	4404      	add	r4, r0
   d4ee0:	e7ee      	b.n	d4ec0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4ee2:	232f      	movs	r3, #47	; 0x2f
   d4ee4:	466a      	mov	r2, sp
   d4ee6:	4639      	mov	r1, r7
   d4ee8:	200a      	movs	r0, #10
		buf[0] = 0;
   d4eea:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4eee:	f7ff faf1 	bl	d44d4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4ef2:	4668      	mov	r0, sp
   d4ef4:	f000 fd63 	bl	d59be <strlen>
   d4ef8:	6833      	ldr	r3, [r6, #0]
   d4efa:	4602      	mov	r2, r0
   d4efc:	68db      	ldr	r3, [r3, #12]
   d4efe:	4669      	mov	r1, sp
   d4f00:	4630      	mov	r0, r6
   d4f02:	4798      	blx	r3
   d4f04:	4604      	mov	r4, r0
    }
    return n;
}
   d4f06:	4620      	mov	r0, r4
   d4f08:	b00d      	add	sp, #52	; 0x34
   d4f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f0c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4f0c:	b510      	push	{r4, lr}
   d4f0e:	4b05      	ldr	r3, [pc, #20]	; (d4f24 <_ZN9IPAddressC1Ev+0x18>)
   d4f10:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4f12:	2211      	movs	r2, #17
   d4f14:	f840 3b04 	str.w	r3, [r0], #4
   d4f18:	2100      	movs	r1, #0
   d4f1a:	f000 fd06 	bl	d592a <memset>
}
   d4f1e:	4620      	mov	r0, r4
   d4f20:	bd10      	pop	{r4, pc}
   d4f22:	bf00      	nop
   d4f24:	000d5b54 	.word	0x000d5b54

000d4f28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4f28:	4603      	mov	r3, r0
   d4f2a:	4a07      	ldr	r2, [pc, #28]	; (d4f48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4f2c:	b510      	push	{r4, lr}
   d4f2e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4f32:	f101 0210 	add.w	r2, r1, #16
   d4f36:	f851 4b04 	ldr.w	r4, [r1], #4
   d4f3a:	f843 4b04 	str.w	r4, [r3], #4
   d4f3e:	4291      	cmp	r1, r2
   d4f40:	d1f9      	bne.n	d4f36 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4f42:	780a      	ldrb	r2, [r1, #0]
   d4f44:	701a      	strb	r2, [r3, #0]
}
   d4f46:	bd10      	pop	{r4, pc}
   d4f48:	000d5b54 	.word	0x000d5b54

000d4f4c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4f4c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4f4e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4f52:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4f56:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4f5a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4f5e:	2304      	movs	r3, #4
   d4f60:	6041      	str	r1, [r0, #4]
   d4f62:	7503      	strb	r3, [r0, #20]
}
   d4f64:	bd10      	pop	{r4, pc}

000d4f66 <_ZN9IPAddressaSEPKh>:
{
   d4f66:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4f68:	78cb      	ldrb	r3, [r1, #3]
   d4f6a:	9300      	str	r3, [sp, #0]
   d4f6c:	788b      	ldrb	r3, [r1, #2]
   d4f6e:	784a      	ldrb	r2, [r1, #1]
   d4f70:	7809      	ldrb	r1, [r1, #0]
   d4f72:	f7ff ffeb 	bl	d4f4c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4f76:	b002      	add	sp, #8
   d4f78:	bd10      	pop	{r4, pc}
	...

000d4f7c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f7c:	4b01      	ldr	r3, [pc, #4]	; (d4f84 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f7e:	4a02      	ldr	r2, [pc, #8]	; (d4f88 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f80:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4f82:	4770      	bx	lr
   d4f84:	2003e5b4 	.word	0x2003e5b4
   d4f88:	000d5b60 	.word	0x000d5b60

000d4f8c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4f8c:	2300      	movs	r3, #0
   d4f8e:	6840      	ldr	r0, [r0, #4]
   d4f90:	461a      	mov	r2, r3
   d4f92:	f7ff bb8b 	b.w	d46ac <network_connect>

000d4f96 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4f96:	6840      	ldr	r0, [r0, #4]
   d4f98:	2200      	movs	r2, #0
   d4f9a:	2102      	movs	r1, #2
   d4f9c:	f7ff bb96 	b.w	d46cc <network_disconnect>

000d4fa0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4fa0:	2200      	movs	r2, #0
   d4fa2:	6840      	ldr	r0, [r0, #4]
   d4fa4:	4611      	mov	r1, r2
   d4fa6:	f7ff bb89 	b.w	d46bc <network_connecting>

000d4faa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4faa:	2200      	movs	r2, #0
   d4fac:	6840      	ldr	r0, [r0, #4]
   d4fae:	4611      	mov	r1, r2
   d4fb0:	f7ff bb94 	b.w	d46dc <network_ready>

000d4fb4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4fb4:	2300      	movs	r3, #0
   d4fb6:	6840      	ldr	r0, [r0, #4]
   d4fb8:	461a      	mov	r2, r3
   d4fba:	4619      	mov	r1, r3
   d4fbc:	f7ff bb96 	b.w	d46ec <network_on>

000d4fc0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4fc0:	2300      	movs	r3, #0
   d4fc2:	6840      	ldr	r0, [r0, #4]
   d4fc4:	461a      	mov	r2, r3
   d4fc6:	4619      	mov	r1, r3
   d4fc8:	f7ff bb98 	b.w	d46fc <network_off>

000d4fcc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4fcc:	6840      	ldr	r0, [r0, #4]
   d4fce:	2100      	movs	r1, #0
   d4fd0:	f7ff bbbc 	b.w	d474c <network_is_on>

000d4fd4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4fd4:	6840      	ldr	r0, [r0, #4]
   d4fd6:	2100      	movs	r1, #0
   d4fd8:	f7ff bbc0 	b.w	d475c <network_is_off>

000d4fdc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4fdc:	6840      	ldr	r0, [r0, #4]
   d4fde:	2200      	movs	r2, #0
   d4fe0:	f081 0101 	eor.w	r1, r1, #1
   d4fe4:	f7ff bb92 	b.w	d470c <network_listen>

000d4fe8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4fe8:	6840      	ldr	r0, [r0, #4]
   d4fea:	2200      	movs	r2, #0
   d4fec:	f7ff bb9e 	b.w	d472c <network_set_listen_timeout>

000d4ff0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4ff0:	2200      	movs	r2, #0
   d4ff2:	6840      	ldr	r0, [r0, #4]
   d4ff4:	4611      	mov	r1, r2
   d4ff6:	f7ff bba1 	b.w	d473c <network_get_listen_timeout>

000d4ffa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4ffa:	2200      	movs	r2, #0
   d4ffc:	6840      	ldr	r0, [r0, #4]
   d4ffe:	4611      	mov	r1, r2
   d5000:	f7ff bb8c 	b.w	d471c <network_listening>

000d5004 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5008:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d500a:	b095      	sub	sp, #84	; 0x54
   d500c:	4616      	mov	r6, r2
   d500e:	460d      	mov	r5, r1
   d5010:	4607      	mov	r7, r0
    IPAddress addr;
   d5012:	f7ff ff7b 	bl	d4f0c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5016:	4621      	mov	r1, r4
   d5018:	2218      	movs	r2, #24
   d501a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d501c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d501e:	f000 fc84 	bl	d592a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5022:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5024:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5028:	4621      	mov	r1, r4
   d502a:	466b      	mov	r3, sp
   d502c:	aa0c      	add	r2, sp, #48	; 0x30
   d502e:	4630      	mov	r0, r6
   d5030:	f7ff fa60 	bl	d44f4 <netdb_getaddrinfo>
    if (!r) {
   d5034:	4604      	mov	r4, r0
   d5036:	2800      	cmp	r0, #0
   d5038:	d146      	bne.n	d50c8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d503a:	4602      	mov	r2, r0
   d503c:	2101      	movs	r1, #1
   d503e:	6868      	ldr	r0, [r5, #4]
   d5040:	f7ff fb4c 	bl	d46dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5044:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5046:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5048:	4622      	mov	r2, r4
   d504a:	6868      	ldr	r0, [r5, #4]
   d504c:	f7ff fb46 	bl	d46dc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5050:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5052:	4681      	mov	r9, r0
        bool ok = false;
   d5054:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5056:	2e00      	cmp	r6, #0
   d5058:	d036      	beq.n	d50c8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d505a:	2900      	cmp	r1, #0
   d505c:	d134      	bne.n	d50c8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d505e:	6873      	ldr	r3, [r6, #4]
   d5060:	2b02      	cmp	r3, #2
   d5062:	d003      	beq.n	d506c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5064:	2b0a      	cmp	r3, #10
   d5066:	d00b      	beq.n	d5080 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5068:	69f6      	ldr	r6, [r6, #28]
   d506a:	e7f4      	b.n	d5056 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d506c:	f1b8 0f00 	cmp.w	r8, #0
   d5070:	d004      	beq.n	d507c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5072:	6971      	ldr	r1, [r6, #20]
   d5074:	4638      	mov	r0, r7
   d5076:	3104      	adds	r1, #4
   d5078:	f7ff ff75 	bl	d4f66 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d507c:	4641      	mov	r1, r8
   d507e:	e7f3      	b.n	d5068 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5080:	f1b9 0f00 	cmp.w	r9, #0
   d5084:	d101      	bne.n	d508a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5086:	4649      	mov	r1, r9
   d5088:	e7ee      	b.n	d5068 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d508a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d508c:	2210      	movs	r2, #16
   d508e:	a801      	add	r0, sp, #4
   d5090:	f000 fc4b 	bl	d592a <memset>
                    a.v = 6;
   d5094:	2306      	movs	r3, #6
   d5096:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d509a:	ad01      	add	r5, sp, #4
   d509c:	f104 0308 	add.w	r3, r4, #8
   d50a0:	3418      	adds	r4, #24
   d50a2:	6818      	ldr	r0, [r3, #0]
   d50a4:	6859      	ldr	r1, [r3, #4]
   d50a6:	462a      	mov	r2, r5
   d50a8:	c203      	stmia	r2!, {r0, r1}
   d50aa:	3308      	adds	r3, #8
   d50ac:	42a3      	cmp	r3, r4
   d50ae:	4615      	mov	r5, r2
   d50b0:	d1f7      	bne.n	d50a2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d50b2:	a901      	add	r1, sp, #4
   d50b4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d50b6:	ad07      	add	r5, sp, #28
   d50b8:	f7ff ff36 	bl	d4f28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d50bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50be:	1d3c      	adds	r4, r7, #4
   d50c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50c2:	682b      	ldr	r3, [r5, #0]
   d50c4:	7023      	strb	r3, [r4, #0]
   d50c6:	e7de      	b.n	d5086 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d50c8:	9800      	ldr	r0, [sp, #0]
   d50ca:	f7ff fa0b 	bl	d44e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d50ce:	4638      	mov	r0, r7
   d50d0:	b015      	add	sp, #84	; 0x54
   d50d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d50d8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d50d8:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d50da:	4a03      	ldr	r2, [pc, #12]	; (d50e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d50dc:	601a      	str	r2, [r3, #0]
   d50de:	2200      	movs	r2, #0
   d50e0:	605a      	str	r2, [r3, #4]

} // spark
   d50e2:	4770      	bx	lr
   d50e4:	2003e5b8 	.word	0x2003e5b8
   d50e8:	000d5b6c 	.word	0x000d5b6c

000d50ec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d50ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50ee:	4606      	mov	r6, r0
   d50f0:	460d      	mov	r5, r1
  size_t n = 0;
   d50f2:	188f      	adds	r7, r1, r2
   d50f4:	2400      	movs	r4, #0
  while (size--) {
   d50f6:	42bd      	cmp	r5, r7
   d50f8:	d00c      	beq.n	d5114 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d50fa:	6833      	ldr	r3, [r6, #0]
   d50fc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5100:	689b      	ldr	r3, [r3, #8]
   d5102:	4630      	mov	r0, r6
   d5104:	4798      	blx	r3
     if (chunk>=0)
   d5106:	1e03      	subs	r3, r0, #0
   d5108:	db01      	blt.n	d510e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d510a:	441c      	add	r4, r3
  while (size--) {
   d510c:	e7f3      	b.n	d50f6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d510e:	2c00      	cmp	r4, #0
   d5110:	bf08      	it	eq
   d5112:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5114:	4620      	mov	r0, r4
   d5116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5118 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5118:	b513      	push	{r0, r1, r4, lr}
   d511a:	4604      	mov	r4, r0
    }
   d511c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d511e:	b159      	cbz	r1, d5138 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5120:	9101      	str	r1, [sp, #4]
   d5122:	f000 fc4c 	bl	d59be <strlen>
   d5126:	6823      	ldr	r3, [r4, #0]
   d5128:	9901      	ldr	r1, [sp, #4]
   d512a:	68db      	ldr	r3, [r3, #12]
   d512c:	4602      	mov	r2, r0
   d512e:	4620      	mov	r0, r4
    }
   d5130:	b002      	add	sp, #8
   d5132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5136:	4718      	bx	r3
    }
   d5138:	b002      	add	sp, #8
   d513a:	bd10      	pop	{r4, pc}

000d513c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d513c:	6803      	ldr	r3, [r0, #0]
   d513e:	689b      	ldr	r3, [r3, #8]
   d5140:	4718      	bx	r3

000d5142 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5142:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5144:	210d      	movs	r1, #13
{
   d5146:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5148:	f7ff fff8 	bl	d513c <_ZN5Print5printEc>
  n += print('\n');
   d514c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d514e:	4604      	mov	r4, r0
  n += print('\n');
   d5150:	4628      	mov	r0, r5
   d5152:	f7ff fff3 	bl	d513c <_ZN5Print5printEc>
  return n;
}
   d5156:	4420      	add	r0, r4
   d5158:	bd38      	pop	{r3, r4, r5, pc}

000d515a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d515a:	b530      	push	{r4, r5, lr}
   d515c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d515e:	2300      	movs	r3, #0
   d5160:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5164:	2a01      	cmp	r2, #1
   d5166:	bf98      	it	ls
   d5168:	220a      	movls	r2, #10
   d516a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d516c:	460d      	mov	r5, r1
   d516e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5172:	fb01 5312 	mls	r3, r1, r2, r5
   d5176:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d517a:	2b09      	cmp	r3, #9
   d517c:	bf94      	ite	ls
   d517e:	3330      	addls	r3, #48	; 0x30
   d5180:	3337      	addhi	r3, #55	; 0x37
   d5182:	b2db      	uxtb	r3, r3
  } while(n);
   d5184:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5186:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d518a:	d9ef      	bls.n	d516c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d518c:	4621      	mov	r1, r4
   d518e:	f7ff ffc3 	bl	d5118 <_ZN5Print5writeEPKc>
}
   d5192:	b00b      	add	sp, #44	; 0x2c
   d5194:	bd30      	pop	{r4, r5, pc}

000d5196 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d519a:	b086      	sub	sp, #24
   d519c:	af00      	add	r7, sp, #0
   d519e:	4605      	mov	r5, r0
   d51a0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d51a2:	1d38      	adds	r0, r7, #4
   d51a4:	2114      	movs	r1, #20
{
   d51a6:	4614      	mov	r4, r2
    va_copy(args2, args);
   d51a8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d51aa:	f7ff faf7 	bl	d479c <vsnprintf>

    if (n<bufsize)
   d51ae:	2813      	cmp	r0, #19
   d51b0:	d80e      	bhi.n	d51d0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d51b2:	1d39      	adds	r1, r7, #4
   d51b4:	4628      	mov	r0, r5
   d51b6:	f7ff ffaf 	bl	d5118 <_ZN5Print5writeEPKc>
   d51ba:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d51bc:	b11e      	cbz	r6, d51c6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d51be:	4628      	mov	r0, r5
   d51c0:	f7ff ffbf 	bl	d5142 <_ZN5Print7printlnEv>
   d51c4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d51c6:	4620      	mov	r0, r4
   d51c8:	3718      	adds	r7, #24
   d51ca:	46bd      	mov	sp, r7
   d51cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d51d0:	f100 0308 	add.w	r3, r0, #8
   d51d4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d51d8:	46e8      	mov	r8, sp
        char bigger[n+1];
   d51da:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d51de:	4622      	mov	r2, r4
   d51e0:	1c41      	adds	r1, r0, #1
   d51e2:	683b      	ldr	r3, [r7, #0]
   d51e4:	4668      	mov	r0, sp
   d51e6:	f7ff fad9 	bl	d479c <vsnprintf>
  return write(str);
   d51ea:	4669      	mov	r1, sp
   d51ec:	4628      	mov	r0, r5
   d51ee:	f7ff ff93 	bl	d5118 <_ZN5Print5writeEPKc>
   d51f2:	4604      	mov	r4, r0
   d51f4:	46c5      	mov	sp, r8
   d51f6:	e7e1      	b.n	d51bc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d51f8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d51f8:	4b01      	ldr	r3, [pc, #4]	; (d5200 <_GLOBAL__sub_I_RGB+0x8>)
   d51fa:	2200      	movs	r2, #0
   d51fc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d51fe:	4770      	bx	lr
   d5200:	2003e5c0 	.word	0x2003e5c0

000d5204 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5204:	b510      	push	{r4, lr}
   d5206:	4604      	mov	r4, r0
   d5208:	4608      	mov	r0, r1
{
    _spi = spi;
   d520a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d520c:	f7ff f97a 	bl	d4504 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5210:	2300      	movs	r3, #0
   d5212:	6063      	str	r3, [r4, #4]
}
   d5214:	4620      	mov	r0, r4
   d5216:	bd10      	pop	{r4, pc}

000d5218 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5218:	b510      	push	{r4, lr}
   d521a:	4604      	mov	r4, r0
{
	free(buffer);
   d521c:	6800      	ldr	r0, [r0, #0]
   d521e:	f7ff faad 	bl	d477c <free>
}
   d5222:	4620      	mov	r0, r4
   d5224:	bd10      	pop	{r4, pc}

000d5226 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5226:	b510      	push	{r4, lr}
   d5228:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d522a:	6800      	ldr	r0, [r0, #0]
   d522c:	b108      	cbz	r0, d5232 <_ZN6String10invalidateEv+0xc>
   d522e:	f7ff faa5 	bl	d477c <free>
	buffer = NULL;
   d5232:	2300      	movs	r3, #0
	capacity = len = 0;
   d5234:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5238:	6023      	str	r3, [r4, #0]
}
   d523a:	bd10      	pop	{r4, pc}

000d523c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d523c:	b538      	push	{r3, r4, r5, lr}
   d523e:	4604      	mov	r4, r0
   d5240:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5242:	6800      	ldr	r0, [r0, #0]
   d5244:	3101      	adds	r1, #1
   d5246:	f7ff faa1 	bl	d478c <realloc>
	if (newbuffer) {
   d524a:	b110      	cbz	r0, d5252 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d524c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5250:	2001      	movs	r0, #1
	}
	return 0;
}
   d5252:	bd38      	pop	{r3, r4, r5, pc}

000d5254 <_ZN6String7reserveEj>:
{
   d5254:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5256:	6803      	ldr	r3, [r0, #0]
{
   d5258:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d525a:	b123      	cbz	r3, d5266 <_ZN6String7reserveEj+0x12>
   d525c:	6843      	ldr	r3, [r0, #4]
   d525e:	428b      	cmp	r3, r1
   d5260:	d301      	bcc.n	d5266 <_ZN6String7reserveEj+0x12>
   d5262:	2001      	movs	r0, #1
}
   d5264:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5266:	4620      	mov	r0, r4
   d5268:	f7ff ffe8 	bl	d523c <_ZN6String12changeBufferEj>
   d526c:	2800      	cmp	r0, #0
   d526e:	d0f9      	beq.n	d5264 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5270:	68a3      	ldr	r3, [r4, #8]
   d5272:	2b00      	cmp	r3, #0
   d5274:	d1f5      	bne.n	d5262 <_ZN6String7reserveEj+0xe>
   d5276:	6822      	ldr	r2, [r4, #0]
   d5278:	7013      	strb	r3, [r2, #0]
   d527a:	e7f2      	b.n	d5262 <_ZN6String7reserveEj+0xe>

000d527c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d527c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d527e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5280:	4611      	mov	r1, r2
   d5282:	9201      	str	r2, [sp, #4]
{
   d5284:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5286:	f7ff ffe5 	bl	d5254 <_ZN6String7reserveEj>
   d528a:	9a01      	ldr	r2, [sp, #4]
   d528c:	b928      	cbnz	r0, d529a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d528e:	4620      	mov	r0, r4
   d5290:	f7ff ffc9 	bl	d5226 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5294:	4620      	mov	r0, r4
   d5296:	b003      	add	sp, #12
   d5298:	bd30      	pop	{r4, r5, pc}
	len = length;
   d529a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d529c:	4629      	mov	r1, r5
   d529e:	6820      	ldr	r0, [r4, #0]
   d52a0:	f000 fb35 	bl	d590e <memcpy>
	buffer[len] = 0;
   d52a4:	6822      	ldr	r2, [r4, #0]
   d52a6:	68a3      	ldr	r3, [r4, #8]
   d52a8:	2100      	movs	r1, #0
   d52aa:	54d1      	strb	r1, [r2, r3]
	return *this;
   d52ac:	e7f2      	b.n	d5294 <_ZN6String4copyEPKcj+0x18>

000d52ae <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d52ae:	b513      	push	{r0, r1, r4, lr}
   d52b0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d52b2:	b159      	cbz	r1, d52cc <_ZN6StringaSEPKc+0x1e>
   d52b4:	4608      	mov	r0, r1
   d52b6:	9101      	str	r1, [sp, #4]
   d52b8:	f000 fb81 	bl	d59be <strlen>
   d52bc:	9901      	ldr	r1, [sp, #4]
   d52be:	4602      	mov	r2, r0
   d52c0:	4620      	mov	r0, r4
   d52c2:	f7ff ffdb 	bl	d527c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d52c6:	4620      	mov	r0, r4
   d52c8:	b002      	add	sp, #8
   d52ca:	bd10      	pop	{r4, pc}
	else invalidate();
   d52cc:	f7ff ffab 	bl	d5226 <_ZN6String10invalidateEv>
   d52d0:	e7f9      	b.n	d52c6 <_ZN6StringaSEPKc+0x18>

000d52d2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d52d2:	b510      	push	{r4, lr}
   d52d4:	4604      	mov	r4, r0
   d52d6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d52d8:	2300      	movs	r3, #0
	capacity = 0;
   d52da:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d52de:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d52e0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d52e2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d52e4:	a901      	add	r1, sp, #4
   d52e6:	f000 f99b 	bl	d5620 <itoa>
	*this = buf;
   d52ea:	a901      	add	r1, sp, #4
   d52ec:	4620      	mov	r0, r4
   d52ee:	f7ff ffde 	bl	d52ae <_ZN6StringaSEPKc>
}
   d52f2:	4620      	mov	r0, r4
   d52f4:	b00a      	add	sp, #40	; 0x28
   d52f6:	bd10      	pop	{r4, pc}

000d52f8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d52f8:	4b05      	ldr	r3, [pc, #20]	; (d5310 <_GLOBAL__sub_I_System+0x18>)
   d52fa:	2202      	movs	r2, #2
   d52fc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d52fe:	4b05      	ldr	r3, [pc, #20]	; (d5314 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d5300:	4a05      	ldr	r2, [pc, #20]	; (d5318 <_GLOBAL__sub_I_System+0x20>)
   d5302:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5304:	2000      	movs	r0, #0
   d5306:	6018      	str	r0, [r3, #0]
   d5308:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d530a:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d530c:	f7ff b982 	b.w	d4614 <set_system_mode>
   d5310:	2003e5dc 	.word	0x2003e5dc
   d5314:	2003e5d0 	.word	0x2003e5d0
   d5318:	ffff0000 	.word	0xffff0000

000d531c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d531c:	4b02      	ldr	r3, [pc, #8]	; (d5328 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d531e:	681a      	ldr	r2, [r3, #0]
   d5320:	4b02      	ldr	r3, [pc, #8]	; (d532c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5322:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5324:	4770      	bx	lr
   d5326:	bf00      	nop
   d5328:	2003e51c 	.word	0x2003e51c
   d532c:	2003e5e0 	.word	0x2003e5e0

000d5330 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5330:	4770      	bx	lr

000d5332 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5332:	7441      	strb	r1, [r0, #17]
}
   d5334:	4770      	bx	lr

000d5336 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5336:	4770      	bx	lr

000d5338 <_ZN11USARTSerial17availableForWriteEv>:
{
   d5338:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d533a:	7c00      	ldrb	r0, [r0, #16]
   d533c:	f7ff f92a 	bl	d4594 <hal_usart_available_data_for_write>
}
   d5340:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5344:	bd08      	pop	{r3, pc}

000d5346 <_ZN11USARTSerial9availableEv>:
{
   d5346:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5348:	7c00      	ldrb	r0, [r0, #16]
   d534a:	f7ff f8fb 	bl	d4544 <hal_usart_available>
}
   d534e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5352:	bd08      	pop	{r3, pc}

000d5354 <_ZN11USARTSerial4peekEv>:
{
   d5354:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5356:	7c00      	ldrb	r0, [r0, #16]
   d5358:	f7ff f904 	bl	d4564 <hal_usart_peek>
}
   d535c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5360:	bd08      	pop	{r3, pc}

000d5362 <_ZN11USARTSerial4readEv>:
{
   d5362:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5364:	7c00      	ldrb	r0, [r0, #16]
   d5366:	f7ff f8f5 	bl	d4554 <hal_usart_read>
}
   d536a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d536e:	bd08      	pop	{r3, pc}

000d5370 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d5370:	7c00      	ldrb	r0, [r0, #16]
   d5372:	f7ff b8ff 	b.w	d4574 <hal_usart_flush>

000d5376 <_ZN11USARTSerial5writeEh>:
{
   d5376:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5378:	7c45      	ldrb	r5, [r0, #17]
{
   d537a:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d537c:	b12d      	cbz	r5, d538a <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d537e:	7c20      	ldrb	r0, [r4, #16]
}
   d5380:	b003      	add	sp, #12
   d5382:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5386:	f7ff b8d5 	b.w	d4534 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d538a:	7c00      	ldrb	r0, [r0, #16]
   d538c:	9101      	str	r1, [sp, #4]
   d538e:	f7ff f901 	bl	d4594 <hal_usart_available_data_for_write>
   d5392:	2800      	cmp	r0, #0
   d5394:	9901      	ldr	r1, [sp, #4]
   d5396:	dcf2      	bgt.n	d537e <_ZN11USARTSerial5writeEh+0x8>
}
   d5398:	4628      	mov	r0, r5
   d539a:	b003      	add	sp, #12
   d539c:	bd30      	pop	{r4, r5, pc}

000d539e <_ZN11USARTSerialD0Ev>:
   d539e:	b510      	push	{r4, lr}
   d53a0:	2114      	movs	r1, #20
   d53a2:	4604      	mov	r4, r0
   d53a4:	f000 faa6 	bl	d58f4 <_ZdlPvj>
   d53a8:	4620      	mov	r0, r4
   d53aa:	bd10      	pop	{r4, pc}

000d53ac <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d53ac:	b510      	push	{r4, lr}
   d53ae:	f04f 0c00 	mov.w	ip, #0
   d53b2:	4604      	mov	r4, r0
   d53b4:	4608      	mov	r0, r1
   d53b6:	4611      	mov	r1, r2
   d53b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d53bc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d53c0:	4a04      	ldr	r2, [pc, #16]	; (d53d4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d53c2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d53c4:	2201      	movs	r2, #1
  _serial = serial;
   d53c6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d53c8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d53ca:	461a      	mov	r2, r3
   d53cc:	f7ff f8aa 	bl	d4524 <hal_usart_init>
}
   d53d0:	4620      	mov	r0, r4
   d53d2:	bd10      	pop	{r4, pc}
   d53d4:	000d5bc4 	.word	0x000d5bc4

000d53d8 <_Z22__fetch_global_Serial1v>:
{
   d53d8:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d53da:	4c0d      	ldr	r4, [pc, #52]	; (d5410 <_Z22__fetch_global_Serial1v+0x38>)
   d53dc:	7821      	ldrb	r1, [r4, #0]
   d53de:	f3bf 8f5b 	dmb	ish
   d53e2:	f011 0101 	ands.w	r1, r1, #1
   d53e6:	d110      	bne.n	d540a <_Z22__fetch_global_Serial1v+0x32>
   d53e8:	4620      	mov	r0, r4
   d53ea:	9101      	str	r1, [sp, #4]
   d53ec:	f7fe fe57 	bl	d409e <__cxa_guard_acquire>
   d53f0:	9901      	ldr	r1, [sp, #4]
   d53f2:	b150      	cbz	r0, d540a <_Z22__fetch_global_Serial1v+0x32>
   d53f4:	4b07      	ldr	r3, [pc, #28]	; (d5414 <_Z22__fetch_global_Serial1v+0x3c>)
   d53f6:	4a08      	ldr	r2, [pc, #32]	; (d5418 <_Z22__fetch_global_Serial1v+0x40>)
   d53f8:	4808      	ldr	r0, [pc, #32]	; (d541c <_Z22__fetch_global_Serial1v+0x44>)
   d53fa:	f7ff ffd7 	bl	d53ac <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d53fe:	4620      	mov	r0, r4
   d5400:	f7fe fe52 	bl	d40a8 <__cxa_guard_release>
   d5404:	4806      	ldr	r0, [pc, #24]	; (d5420 <_Z22__fetch_global_Serial1v+0x48>)
   d5406:	f000 fa7c 	bl	d5902 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d540a:	4804      	ldr	r0, [pc, #16]	; (d541c <_Z22__fetch_global_Serial1v+0x44>)
   d540c:	b002      	add	sp, #8
   d540e:	bd10      	pop	{r4, pc}
   d5410:	2003e5e4 	.word	0x2003e5e4
   d5414:	2003e66c 	.word	0x2003e66c
   d5418:	2003e5e8 	.word	0x2003e5e8
   d541c:	2003e6f0 	.word	0x2003e6f0
   d5420:	000d5337 	.word	0x000d5337

000d5424 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5424:	7441      	strb	r1, [r0, #17]
}
   d5426:	4770      	bx	lr

000d5428 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5428:	4770      	bx	lr

000d542a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d542a:	4770      	bx	lr

000d542c <_ZN9USBSerial4readEv>:
{
   d542c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d542e:	2100      	movs	r1, #0
   d5430:	7c00      	ldrb	r0, [r0, #16]
   d5432:	f7ff f8d7 	bl	d45e4 <HAL_USB_USART_Receive_Data>
}
   d5436:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d543a:	bd08      	pop	{r3, pc}

000d543c <_ZN9USBSerial4peekEv>:
{
   d543c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d543e:	2101      	movs	r1, #1
   d5440:	7c00      	ldrb	r0, [r0, #16]
   d5442:	f7ff f8cf 	bl	d45e4 <HAL_USB_USART_Receive_Data>
}
   d5446:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d544a:	bd08      	pop	{r3, pc}

000d544c <_ZN9USBSerial17availableForWriteEv>:
{
   d544c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d544e:	7c00      	ldrb	r0, [r0, #16]
   d5450:	f7ff f8c0 	bl	d45d4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5454:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5458:	bd08      	pop	{r3, pc}

000d545a <_ZN9USBSerial9availableEv>:
{
   d545a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d545c:	7c00      	ldrb	r0, [r0, #16]
   d545e:	f7ff f8b1 	bl	d45c4 <HAL_USB_USART_Available_Data>
}
   d5462:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5466:	bd08      	pop	{r3, pc}

000d5468 <_ZN9USBSerial5writeEh>:
{
   d5468:	b513      	push	{r0, r1, r4, lr}
   d546a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d546c:	7c00      	ldrb	r0, [r0, #16]
{
   d546e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5470:	f7ff f8b0 	bl	d45d4 <HAL_USB_USART_Available_Data_For_Write>
   d5474:	2800      	cmp	r0, #0
   d5476:	9901      	ldr	r1, [sp, #4]
   d5478:	dc01      	bgt.n	d547e <_ZN9USBSerial5writeEh+0x16>
   d547a:	7c60      	ldrb	r0, [r4, #17]
   d547c:	b120      	cbz	r0, d5488 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d547e:	7c20      	ldrb	r0, [r4, #16]
   d5480:	f7ff f8b8 	bl	d45f4 <HAL_USB_USART_Send_Data>
   d5484:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5488:	b002      	add	sp, #8
   d548a:	bd10      	pop	{r4, pc}

000d548c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d548c:	7c00      	ldrb	r0, [r0, #16]
   d548e:	f7ff b8b9 	b.w	d4604 <HAL_USB_USART_Flush_Data>

000d5492 <_ZN9USBSerialD0Ev>:
   d5492:	b510      	push	{r4, lr}
   d5494:	2114      	movs	r1, #20
   d5496:	4604      	mov	r4, r0
   d5498:	f000 fa2c 	bl	d58f4 <_ZdlPvj>
   d549c:	4620      	mov	r0, r4
   d549e:	bd10      	pop	{r4, pc}

000d54a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d54a0:	b510      	push	{r4, lr}
   d54a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54a6:	4604      	mov	r4, r0
   d54a8:	4608      	mov	r0, r1
   d54aa:	2100      	movs	r1, #0
   d54ac:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d54b0:	4b04      	ldr	r3, [pc, #16]	; (d54c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d54b2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d54b4:	2301      	movs	r3, #1
  _serial = serial;
   d54b6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d54b8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d54ba:	4611      	mov	r1, r2
   d54bc:	f7ff f872 	bl	d45a4 <HAL_USB_USART_Init>
}
   d54c0:	4620      	mov	r0, r4
   d54c2:	bd10      	pop	{r4, pc}
   d54c4:	000d5bf4 	.word	0x000d5bf4

000d54c8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d54c8:	7c00      	ldrb	r0, [r0, #16]
   d54ca:	2200      	movs	r2, #0
   d54cc:	f7ff b872 	b.w	d45b4 <HAL_USB_USART_Begin>

000d54d0 <_Z19acquireSerialBufferv>:
{
   d54d0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d54d2:	2214      	movs	r2, #20
{
   d54d4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d54d6:	2100      	movs	r1, #0
   d54d8:	f000 fa27 	bl	d592a <memset>
}
   d54dc:	4620      	mov	r0, r4
   d54de:	bd10      	pop	{r4, pc}

000d54e0 <_Z16_fetch_usbserialv>:
{
   d54e0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54e2:	4c0f      	ldr	r4, [pc, #60]	; (d5520 <_Z16_fetch_usbserialv+0x40>)
{
   d54e4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d54e6:	a803      	add	r0, sp, #12
   d54e8:	f7ff fff2 	bl	d54d0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54ec:	7821      	ldrb	r1, [r4, #0]
   d54ee:	f3bf 8f5b 	dmb	ish
   d54f2:	f011 0101 	ands.w	r1, r1, #1
   d54f6:	d10f      	bne.n	d5518 <_Z16_fetch_usbserialv+0x38>
   d54f8:	4620      	mov	r0, r4
   d54fa:	9101      	str	r1, [sp, #4]
   d54fc:	f7fe fdcf 	bl	d409e <__cxa_guard_acquire>
   d5500:	9901      	ldr	r1, [sp, #4]
   d5502:	b148      	cbz	r0, d5518 <_Z16_fetch_usbserialv+0x38>
   d5504:	aa03      	add	r2, sp, #12
   d5506:	4807      	ldr	r0, [pc, #28]	; (d5524 <_Z16_fetch_usbserialv+0x44>)
   d5508:	f7ff ffca 	bl	d54a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d550c:	4620      	mov	r0, r4
   d550e:	f7fe fdcb 	bl	d40a8 <__cxa_guard_release>
   d5512:	4805      	ldr	r0, [pc, #20]	; (d5528 <_Z16_fetch_usbserialv+0x48>)
   d5514:	f000 f9f5 	bl	d5902 <atexit>
	return _usbserial;
}
   d5518:	4802      	ldr	r0, [pc, #8]	; (d5524 <_Z16_fetch_usbserialv+0x44>)
   d551a:	b008      	add	sp, #32
   d551c:	bd10      	pop	{r4, pc}
   d551e:	bf00      	nop
   d5520:	2003e704 	.word	0x2003e704
   d5524:	2003e708 	.word	0x2003e708
   d5528:	000d5429 	.word	0x000d5429

000d552c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d552c:	2200      	movs	r2, #0
   d552e:	6840      	ldr	r0, [r0, #4]
   d5530:	4611      	mov	r1, r2
   d5532:	f7ff b8d3 	b.w	d46dc <network_ready>

000d5536 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5536:	2200      	movs	r2, #0
   d5538:	6840      	ldr	r0, [r0, #4]
   d553a:	4611      	mov	r1, r2
   d553c:	f7ff b8ee 	b.w	d471c <network_listening>

000d5540 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5540:	2200      	movs	r2, #0
   d5542:	6840      	ldr	r0, [r0, #4]
   d5544:	4611      	mov	r1, r2
   d5546:	f7ff b8f9 	b.w	d473c <network_get_listen_timeout>

000d554a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d554a:	6840      	ldr	r0, [r0, #4]
   d554c:	2200      	movs	r2, #0
   d554e:	f7ff b8ed 	b.w	d472c <network_set_listen_timeout>

000d5552 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5552:	6840      	ldr	r0, [r0, #4]
   d5554:	2200      	movs	r2, #0
   d5556:	f081 0101 	eor.w	r1, r1, #1
   d555a:	f7ff b8d7 	b.w	d470c <network_listen>

000d555e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d555e:	2300      	movs	r3, #0
   d5560:	6840      	ldr	r0, [r0, #4]
   d5562:	461a      	mov	r2, r3
   d5564:	4619      	mov	r1, r3
   d5566:	f7ff b8c9 	b.w	d46fc <network_off>

000d556a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d556a:	2300      	movs	r3, #0
   d556c:	6840      	ldr	r0, [r0, #4]
   d556e:	461a      	mov	r2, r3
   d5570:	4619      	mov	r1, r3
   d5572:	f7ff b8bb 	b.w	d46ec <network_on>

000d5576 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5576:	2200      	movs	r2, #0
   d5578:	6840      	ldr	r0, [r0, #4]
   d557a:	4611      	mov	r1, r2
   d557c:	f7ff b89e 	b.w	d46bc <network_connecting>

000d5580 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5580:	6840      	ldr	r0, [r0, #4]
   d5582:	2200      	movs	r2, #0
   d5584:	2102      	movs	r1, #2
   d5586:	f7ff b8a1 	b.w	d46cc <network_disconnect>

000d558a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d558a:	2300      	movs	r3, #0
   d558c:	6840      	ldr	r0, [r0, #4]
   d558e:	461a      	mov	r2, r3
   d5590:	f7ff b88c 	b.w	d46ac <network_connect>

000d5594 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5594:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5596:	2204      	movs	r2, #4
   d5598:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d559a:	4a02      	ldr	r2, [pc, #8]	; (d55a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d559c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d559e:	4770      	bx	lr
   d55a0:	2003e71c 	.word	0x2003e71c
   d55a4:	000d5c24 	.word	0x000d5c24

000d55a8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d55a8:	b510      	push	{r4, lr}
   d55aa:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d55ac:	f000 fa07 	bl	d59be <strlen>
   d55b0:	3801      	subs	r0, #1
   d55b2:	1823      	adds	r3, r4, r0
   d55b4:	4620      	mov	r0, r4
	while(i<j){
   d55b6:	4283      	cmp	r3, r0
   d55b8:	d906      	bls.n	d55c8 <_Z11str_reversePc+0x20>
		c = *i;
   d55ba:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d55bc:	7819      	ldrb	r1, [r3, #0]
   d55be:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d55c2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d55c6:	e7f6      	b.n	d55b6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d55c8:	bd10      	pop	{r4, pc}

000d55ca <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d55ca:	b570      	push	{r4, r5, r6, lr}
   d55cc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d55ce:	1e91      	subs	r1, r2, #2
   d55d0:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d55d2:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d55d4:	d822      	bhi.n	d561c <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d55d6:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d55d8:	b16d      	cbz	r5, d55f6 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d55da:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d55de:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d55e2:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d55e4:	2d09      	cmp	r5, #9
                *ptr += '0';
   d55e6:	bf94      	ite	ls
   d55e8:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d55ea:	3157      	addhi	r1, #87	; 0x57
   d55ec:	b2c9      	uxtb	r1, r1
   d55ee:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d55f2:	4635      	mov	r5, r6
	while(a){
   d55f4:	e7f0      	b.n	d55d8 <ultoa+0xe>
   d55f6:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d55f8:	4423      	add	r3, r4
            *ptr++ = '0';
   d55fa:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d55fc:	4293      	cmp	r3, r2
   d55fe:	d902      	bls.n	d5606 <ultoa+0x3c>
            *ptr++ = '0';
   d5600:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d5604:	e7fa      	b.n	d55fc <ultoa+0x32>
   d5606:	1a1a      	subs	r2, r3, r0
   d5608:	4283      	cmp	r3, r0
   d560a:	bf38      	it	cc
   d560c:	2200      	movcc	r2, #0

	*ptr = '\0';
   d560e:	2300      	movs	r3, #0
   d5610:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d5612:	4620      	mov	r0, r4
   d5614:	f7ff ffc8 	bl	d55a8 <_Z11str_reversePc>
	return buffer;
   d5618:	4620      	mov	r0, r4
}
   d561a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d561c:	2000      	movs	r0, #0
   d561e:	e7fc      	b.n	d561a <ultoa+0x50>

000d5620 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5620:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d5622:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5624:	460c      	mov	r4, r1
   d5626:	4615      	mov	r5, r2
	if(a<0){
   d5628:	da0e      	bge.n	d5648 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d562a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d562e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5632:	bf14      	ite	ne
   d5634:	4258      	negne	r0, r3
   d5636:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d5638:	2301      	movs	r3, #1
		*buffer = '-';
   d563a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d563c:	462a      	mov	r2, r5
   d563e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d5640:	f7ff ffc3 	bl	d55ca <ultoa>
	}
	return buffer;
}
   d5644:	4620      	mov	r0, r4
   d5646:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d5648:	2301      	movs	r3, #1
   d564a:	e7f9      	b.n	d5640 <itoa+0x20>

000d564c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d564c:	4b01      	ldr	r3, [pc, #4]	; (d5654 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d564e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5650:	4770      	bx	lr
   d5652:	bf00      	nop
   d5654:	2003e520 	.word	0x2003e520

000d5658 <serialEventRun>:
{
   d5658:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d565a:	4b0b      	ldr	r3, [pc, #44]	; (d5688 <serialEventRun+0x30>)
   d565c:	b143      	cbz	r3, d5670 <serialEventRun+0x18>
   d565e:	f7ff ff3f 	bl	d54e0 <_Z16_fetch_usbserialv>
   d5662:	6803      	ldr	r3, [r0, #0]
   d5664:	691b      	ldr	r3, [r3, #16]
   d5666:	4798      	blx	r3
   d5668:	2800      	cmp	r0, #0
   d566a:	dd01      	ble.n	d5670 <serialEventRun+0x18>
        serialEvent();
   d566c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5670:	4b06      	ldr	r3, [pc, #24]	; (d568c <serialEventRun+0x34>)
   d5672:	b143      	cbz	r3, d5686 <serialEventRun+0x2e>
   d5674:	f7ff feb0 	bl	d53d8 <_Z22__fetch_global_Serial1v>
   d5678:	6803      	ldr	r3, [r0, #0]
   d567a:	691b      	ldr	r3, [r3, #16]
   d567c:	4798      	blx	r3
   d567e:	2800      	cmp	r0, #0
   d5680:	dd01      	ble.n	d5686 <serialEventRun+0x2e>
        serialEvent1();
   d5682:	f3af 8000 	nop.w
}
   d5686:	bd08      	pop	{r3, pc}
	...

000d5690 <_post_loop>:
{
   d5690:	b508      	push	{r3, lr}
	serialEventRun();
   d5692:	f7ff ffe1 	bl	d5658 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5696:	f7fe fead 	bl	d43f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d569a:	4b01      	ldr	r3, [pc, #4]	; (d56a0 <_post_loop+0x10>)
   d569c:	6018      	str	r0, [r3, #0]
}
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	2003e738 	.word	0x2003e738

000d56a4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d56a4:	4805      	ldr	r0, [pc, #20]	; (d56bc <_Z33system_initialize_user_backup_ramv+0x18>)
   d56a6:	4a06      	ldr	r2, [pc, #24]	; (d56c0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d56a8:	4906      	ldr	r1, [pc, #24]	; (d56c4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d56aa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d56ac:	1a12      	subs	r2, r2, r0
   d56ae:	f000 f92e 	bl	d590e <memcpy>
    __backup_sram_signature = signature;
   d56b2:	4b05      	ldr	r3, [pc, #20]	; (d56c8 <_Z33system_initialize_user_backup_ramv+0x24>)
   d56b4:	4a05      	ldr	r2, [pc, #20]	; (d56cc <_Z33system_initialize_user_backup_ramv+0x28>)
   d56b6:	601a      	str	r2, [r3, #0]
}
   d56b8:	bd08      	pop	{r3, pc}
   d56ba:	bf00      	nop
   d56bc:	2003f400 	.word	0x2003f400
   d56c0:	2003f404 	.word	0x2003f404
   d56c4:	000d5c80 	.word	0x000d5c80
   d56c8:	2003f400 	.word	0x2003f400
   d56cc:	9a271c1e 	.word	0x9a271c1e

000d56d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d56d0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d56d2:	2300      	movs	r3, #0
   d56d4:	9300      	str	r3, [sp, #0]
   d56d6:	461a      	mov	r2, r3
   d56d8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d56dc:	f7fe ffc4 	bl	d4668 <system_ctrl_set_result>
}
   d56e0:	b003      	add	sp, #12
   d56e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d56e8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d56e8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d56ea:	8843      	ldrh	r3, [r0, #2]
   d56ec:	2b0a      	cmp	r3, #10
   d56ee:	d008      	beq.n	d5702 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d56f0:	2b50      	cmp	r3, #80	; 0x50
   d56f2:	d10b      	bne.n	d570c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d56f4:	4b09      	ldr	r3, [pc, #36]	; (d571c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d56f6:	681b      	ldr	r3, [r3, #0]
   d56f8:	b14b      	cbz	r3, d570e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d56fa:	b003      	add	sp, #12
   d56fc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5700:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5702:	f7ff ffe5 	bl	d56d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5706:	b003      	add	sp, #12
   d5708:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d570c:	2300      	movs	r3, #0
   d570e:	9300      	str	r3, [sp, #0]
   d5710:	461a      	mov	r2, r3
   d5712:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5716:	f7fe ffa7 	bl	d4668 <system_ctrl_set_result>
}
   d571a:	e7f4      	b.n	d5706 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d571c:	2003e728 	.word	0x2003e728

000d5720 <module_user_init_hook>:
{
   d5720:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5722:	4812      	ldr	r0, [pc, #72]	; (d576c <module_user_init_hook+0x4c>)
   d5724:	2100      	movs	r1, #0
   d5726:	f7ff f851 	bl	d47cc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d572a:	4b11      	ldr	r3, [pc, #68]	; (d5770 <module_user_init_hook+0x50>)
   d572c:	681a      	ldr	r2, [r3, #0]
   d572e:	4b11      	ldr	r3, [pc, #68]	; (d5774 <module_user_init_hook+0x54>)
   d5730:	429a      	cmp	r2, r3
   d5732:	4b11      	ldr	r3, [pc, #68]	; (d5778 <module_user_init_hook+0x58>)
   d5734:	bf0c      	ite	eq
   d5736:	2201      	moveq	r2, #1
   d5738:	2200      	movne	r2, #0
   d573a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d573c:	d001      	beq.n	d5742 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d573e:	f7ff ffb1 	bl	d56a4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5742:	f7fe fe47 	bl	d43d4 <HAL_RNG_GetRandomNumber>
   d5746:	4604      	mov	r4, r0
    srand(seed);
   d5748:	f000 f8f8 	bl	d593c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d574c:	4b0b      	ldr	r3, [pc, #44]	; (d577c <module_user_init_hook+0x5c>)
   d574e:	b113      	cbz	r3, d5756 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d5750:	4620      	mov	r0, r4
   d5752:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5756:	2100      	movs	r1, #0
   d5758:	4808      	ldr	r0, [pc, #32]	; (d577c <module_user_init_hook+0x5c>)
   d575a:	f7fe ff9f 	bl	d469c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d575e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5762:	4807      	ldr	r0, [pc, #28]	; (d5780 <module_user_init_hook+0x60>)
   d5764:	2100      	movs	r1, #0
   d5766:	f7fe bf75 	b.w	d4654 <system_ctrl_set_app_request_handler>
   d576a:	bf00      	nop
   d576c:	000d564d 	.word	0x000d564d
   d5770:	2003f400 	.word	0x2003f400
   d5774:	9a271c1e 	.word	0x9a271c1e
   d5778:	2003e724 	.word	0x2003e724
   d577c:	00000000 	.word	0x00000000
   d5780:	000d56e9 	.word	0x000d56e9

000d5784 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5784:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5786:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5788:	d902      	bls.n	d5790 <pinAvailable+0xc>
    return false;
   d578a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d578c:	b002      	add	sp, #8
   d578e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5790:	f1a0 030b 	sub.w	r3, r0, #11
   d5794:	2b02      	cmp	r3, #2
   d5796:	d81a      	bhi.n	d57ce <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5798:	4c17      	ldr	r4, [pc, #92]	; (d57f8 <pinAvailable+0x74>)
   d579a:	7821      	ldrb	r1, [r4, #0]
   d579c:	f3bf 8f5b 	dmb	ish
   d57a0:	f011 0101 	ands.w	r1, r1, #1
   d57a4:	d10b      	bne.n	d57be <pinAvailable+0x3a>
   d57a6:	4620      	mov	r0, r4
   d57a8:	9101      	str	r1, [sp, #4]
   d57aa:	f7fe fc78 	bl	d409e <__cxa_guard_acquire>
   d57ae:	9901      	ldr	r1, [sp, #4]
   d57b0:	b128      	cbz	r0, d57be <pinAvailable+0x3a>
   d57b2:	4812      	ldr	r0, [pc, #72]	; (d57fc <pinAvailable+0x78>)
   d57b4:	f7ff fd26 	bl	d5204 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d57b8:	4620      	mov	r0, r4
   d57ba:	f7fe fc75 	bl	d40a8 <__cxa_guard_release>
   d57be:	4b0f      	ldr	r3, [pc, #60]	; (d57fc <pinAvailable+0x78>)
   d57c0:	7818      	ldrb	r0, [r3, #0]
   d57c2:	f7fe fea7 	bl	d4514 <hal_spi_is_enabled>
   d57c6:	2800      	cmp	r0, #0
   d57c8:	d1df      	bne.n	d578a <pinAvailable+0x6>
  return true; // 'pin' is available
   d57ca:	2001      	movs	r0, #1
   d57cc:	e7de      	b.n	d578c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d57ce:	2801      	cmp	r0, #1
   d57d0:	d809      	bhi.n	d57e6 <pinAvailable+0x62>
   d57d2:	f000 f86b 	bl	d58ac <_Z19__fetch_global_Wirev>
   d57d6:	2100      	movs	r1, #0
   d57d8:	7c00      	ldrb	r0, [r0, #16]
   d57da:	f7fe fe6b 	bl	d44b4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d57de:	f080 0001 	eor.w	r0, r0, #1
   d57e2:	b2c0      	uxtb	r0, r0
   d57e4:	e7d2      	b.n	d578c <pinAvailable+0x8>
   d57e6:	3809      	subs	r0, #9
   d57e8:	2801      	cmp	r0, #1
   d57ea:	d8ee      	bhi.n	d57ca <pinAvailable+0x46>
   d57ec:	f7ff fdf4 	bl	d53d8 <_Z22__fetch_global_Serial1v>
   d57f0:	7c00      	ldrb	r0, [r0, #16]
   d57f2:	f7fe fec7 	bl	d4584 <hal_usart_is_enabled>
   d57f6:	e7f2      	b.n	d57de <pinAvailable+0x5a>
   d57f8:	2003e72c 	.word	0x2003e72c
   d57fc:	2003e730 	.word	0x2003e730

000d5800 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5800:	2823      	cmp	r0, #35	; 0x23
{
   d5802:	b538      	push	{r3, r4, r5, lr}
   d5804:	4604      	mov	r4, r0
   d5806:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5808:	d80a      	bhi.n	d5820 <pinMode+0x20>
   d580a:	29ff      	cmp	r1, #255	; 0xff
   d580c:	d008      	beq.n	d5820 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d580e:	f7ff ffb9 	bl	d5784 <pinAvailable>
   d5812:	b128      	cbz	r0, d5820 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5814:	4629      	mov	r1, r5
   d5816:	4620      	mov	r0, r4
}
   d5818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d581c:	f7fe bdf2 	b.w	d4404 <HAL_Pin_Mode>
}
   d5820:	bd38      	pop	{r3, r4, r5, pc}

000d5822 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5822:	b538      	push	{r3, r4, r5, lr}
   d5824:	4604      	mov	r4, r0
   d5826:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5828:	f7fe fdf4 	bl	d4414 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d582c:	28ff      	cmp	r0, #255	; 0xff
   d582e:	d010      	beq.n	d5852 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5830:	2806      	cmp	r0, #6
   d5832:	d804      	bhi.n	d583e <digitalWrite+0x1c>
   d5834:	234d      	movs	r3, #77	; 0x4d
   d5836:	fa23 f000 	lsr.w	r0, r3, r0
   d583a:	07c3      	lsls	r3, r0, #31
   d583c:	d409      	bmi.n	d5852 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d583e:	4620      	mov	r0, r4
   d5840:	f7ff ffa0 	bl	d5784 <pinAvailable>
   d5844:	b128      	cbz	r0, d5852 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5846:	4629      	mov	r1, r5
   d5848:	4620      	mov	r0, r4
}
   d584a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d584e:	f7fe bde9 	b.w	d4424 <HAL_GPIO_Write>
}
   d5852:	bd38      	pop	{r3, r4, r5, pc}

000d5854 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5854:	b510      	push	{r4, lr}
   d5856:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5858:	f7fe fddc 	bl	d4414 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d585c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d585e:	b2db      	uxtb	r3, r3
   d5860:	2b01      	cmp	r3, #1
   d5862:	d908      	bls.n	d5876 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5864:	4620      	mov	r0, r4
   d5866:	f7ff ff8d 	bl	d5784 <pinAvailable>
   d586a:	b120      	cbz	r0, d5876 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d586c:	4620      	mov	r0, r4
}
   d586e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d5872:	f7fe bddf 	b.w	d4434 <HAL_GPIO_Read>
}
   d5876:	2000      	movs	r0, #0
   d5878:	bd10      	pop	{r4, pc}

000d587a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d587a:	4770      	bx	lr

000d587c <_Z17acquireWireBufferv>:
{
   d587c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d587e:	2300      	movs	r3, #0
   d5880:	2520      	movs	r5, #32
   d5882:	8043      	strh	r3, [r0, #2]
   d5884:	2314      	movs	r3, #20
{
   d5886:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5888:	8003      	strh	r3, [r0, #0]
   d588a:	6085      	str	r5, [r0, #8]
   d588c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d588e:	4906      	ldr	r1, [pc, #24]	; (d58a8 <_Z17acquireWireBufferv+0x2c>)
   d5890:	4628      	mov	r0, r5
   d5892:	f000 f831 	bl	d58f8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5896:	4904      	ldr	r1, [pc, #16]	; (d58a8 <_Z17acquireWireBufferv+0x2c>)
	};
   d5898:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d589a:	4628      	mov	r0, r5
   d589c:	f000 f82c 	bl	d58f8 <_ZnajRKSt9nothrow_t>
	};
   d58a0:	60e0      	str	r0, [r4, #12]
}
   d58a2:	4620      	mov	r0, r4
   d58a4:	bd38      	pop	{r3, r4, r5, pc}
   d58a6:	bf00      	nop
   d58a8:	000d5c58 	.word	0x000d5c58

000d58ac <_Z19__fetch_global_Wirev>:
{
   d58ac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d58ae:	4d0e      	ldr	r5, [pc, #56]	; (d58e8 <_Z19__fetch_global_Wirev+0x3c>)
   d58b0:	7829      	ldrb	r1, [r5, #0]
   d58b2:	f3bf 8f5b 	dmb	ish
   d58b6:	f011 0401 	ands.w	r4, r1, #1
{
   d58ba:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d58bc:	d111      	bne.n	d58e2 <_Z19__fetch_global_Wirev+0x36>
   d58be:	4628      	mov	r0, r5
   d58c0:	f7fe fbed 	bl	d409e <__cxa_guard_acquire>
   d58c4:	b168      	cbz	r0, d58e2 <_Z19__fetch_global_Wirev+0x36>
   d58c6:	a801      	add	r0, sp, #4
   d58c8:	f7ff ffd8 	bl	d587c <_Z17acquireWireBufferv>
   d58cc:	aa01      	add	r2, sp, #4
   d58ce:	4621      	mov	r1, r4
   d58d0:	4806      	ldr	r0, [pc, #24]	; (d58ec <_Z19__fetch_global_Wirev+0x40>)
   d58d2:	f7ff facb 	bl	d4e6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d58d6:	4628      	mov	r0, r5
   d58d8:	f7fe fbe6 	bl	d40a8 <__cxa_guard_release>
   d58dc:	4804      	ldr	r0, [pc, #16]	; (d58f0 <_Z19__fetch_global_Wirev+0x44>)
   d58de:	f000 f810 	bl	d5902 <atexit>
	return wire;
}
   d58e2:	4802      	ldr	r0, [pc, #8]	; (d58ec <_Z19__fetch_global_Wirev+0x40>)
   d58e4:	b007      	add	sp, #28
   d58e6:	bd30      	pop	{r4, r5, pc}
   d58e8:	2003e73c 	.word	0x2003e73c
   d58ec:	2003e740 	.word	0x2003e740
   d58f0:	000d587b 	.word	0x000d587b

000d58f4 <_ZdlPvj>:
   d58f4:	f7fe bbd1 	b.w	d409a <_ZdlPv>

000d58f8 <_ZnajRKSt9nothrow_t>:
   d58f8:	f7fe bbcd 	b.w	d4096 <_Znaj>

000d58fc <_ZSt25__throw_bad_function_callv>:
   d58fc:	b508      	push	{r3, lr}
   d58fe:	f7fe ff55 	bl	d47ac <abort>

000d5902 <atexit>:
   d5902:	2300      	movs	r3, #0
   d5904:	4601      	mov	r1, r0
   d5906:	461a      	mov	r2, r3
   d5908:	4618      	mov	r0, r3
   d590a:	f000 b861 	b.w	d59d0 <__register_exitproc>

000d590e <memcpy>:
   d590e:	440a      	add	r2, r1
   d5910:	4291      	cmp	r1, r2
   d5912:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d5916:	d100      	bne.n	d591a <memcpy+0xc>
   d5918:	4770      	bx	lr
   d591a:	b510      	push	{r4, lr}
   d591c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5920:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5924:	4291      	cmp	r1, r2
   d5926:	d1f9      	bne.n	d591c <memcpy+0xe>
   d5928:	bd10      	pop	{r4, pc}

000d592a <memset>:
   d592a:	4402      	add	r2, r0
   d592c:	4603      	mov	r3, r0
   d592e:	4293      	cmp	r3, r2
   d5930:	d100      	bne.n	d5934 <memset+0xa>
   d5932:	4770      	bx	lr
   d5934:	f803 1b01 	strb.w	r1, [r3], #1
   d5938:	e7f9      	b.n	d592e <memset+0x4>
	...

000d593c <srand>:
   d593c:	b538      	push	{r3, r4, r5, lr}
   d593e:	4b0d      	ldr	r3, [pc, #52]	; (d5974 <srand+0x38>)
   d5940:	681d      	ldr	r5, [r3, #0]
   d5942:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5944:	4604      	mov	r4, r0
   d5946:	b97b      	cbnz	r3, d5968 <srand+0x2c>
   d5948:	2018      	movs	r0, #24
   d594a:	f7fe ff0f 	bl	d476c <malloc>
   d594e:	4a0a      	ldr	r2, [pc, #40]	; (d5978 <srand+0x3c>)
   d5950:	4b0a      	ldr	r3, [pc, #40]	; (d597c <srand+0x40>)
   d5952:	63a8      	str	r0, [r5, #56]	; 0x38
   d5954:	e9c0 2300 	strd	r2, r3, [r0]
   d5958:	4b09      	ldr	r3, [pc, #36]	; (d5980 <srand+0x44>)
   d595a:	6083      	str	r3, [r0, #8]
   d595c:	230b      	movs	r3, #11
   d595e:	8183      	strh	r3, [r0, #12]
   d5960:	2201      	movs	r2, #1
   d5962:	2300      	movs	r3, #0
   d5964:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5968:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d596a:	2200      	movs	r2, #0
   d596c:	611c      	str	r4, [r3, #16]
   d596e:	615a      	str	r2, [r3, #20]
   d5970:	bd38      	pop	{r3, r4, r5, pc}
   d5972:	bf00      	nop
   d5974:	2003e520 	.word	0x2003e520
   d5978:	abcd330e 	.word	0xabcd330e
   d597c:	e66d1234 	.word	0xe66d1234
   d5980:	0005deec 	.word	0x0005deec

000d5984 <strdup>:
   d5984:	4b02      	ldr	r3, [pc, #8]	; (d5990 <strdup+0xc>)
   d5986:	4601      	mov	r1, r0
   d5988:	6818      	ldr	r0, [r3, #0]
   d598a:	f000 b803 	b.w	d5994 <_strdup_r>
   d598e:	bf00      	nop
   d5990:	2003e520 	.word	0x2003e520

000d5994 <_strdup_r>:
   d5994:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5996:	4604      	mov	r4, r0
   d5998:	4608      	mov	r0, r1
   d599a:	460d      	mov	r5, r1
   d599c:	f000 f80f 	bl	d59be <strlen>
   d59a0:	1c42      	adds	r2, r0, #1
   d59a2:	4611      	mov	r1, r2
   d59a4:	4620      	mov	r0, r4
   d59a6:	9201      	str	r2, [sp, #4]
   d59a8:	f7fe ff08 	bl	d47bc <_malloc_r>
   d59ac:	4604      	mov	r4, r0
   d59ae:	b118      	cbz	r0, d59b8 <_strdup_r+0x24>
   d59b0:	9a01      	ldr	r2, [sp, #4]
   d59b2:	4629      	mov	r1, r5
   d59b4:	f7ff ffab 	bl	d590e <memcpy>
   d59b8:	4620      	mov	r0, r4
   d59ba:	b003      	add	sp, #12
   d59bc:	bd30      	pop	{r4, r5, pc}

000d59be <strlen>:
   d59be:	4603      	mov	r3, r0
   d59c0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d59c4:	2a00      	cmp	r2, #0
   d59c6:	d1fb      	bne.n	d59c0 <strlen+0x2>
   d59c8:	1a18      	subs	r0, r3, r0
   d59ca:	3801      	subs	r0, #1
   d59cc:	4770      	bx	lr
	...

000d59d0 <__register_exitproc>:
   d59d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d59d4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d5a90 <__register_exitproc+0xc0>
   d59d8:	4606      	mov	r6, r0
   d59da:	f8d8 0000 	ldr.w	r0, [r8]
   d59de:	461f      	mov	r7, r3
   d59e0:	460d      	mov	r5, r1
   d59e2:	4691      	mov	r9, r2
   d59e4:	f000 f856 	bl	d5a94 <__retarget_lock_acquire_recursive>
   d59e8:	4b25      	ldr	r3, [pc, #148]	; (d5a80 <__register_exitproc+0xb0>)
   d59ea:	681c      	ldr	r4, [r3, #0]
   d59ec:	b934      	cbnz	r4, d59fc <__register_exitproc+0x2c>
   d59ee:	4c25      	ldr	r4, [pc, #148]	; (d5a84 <__register_exitproc+0xb4>)
   d59f0:	601c      	str	r4, [r3, #0]
   d59f2:	4b25      	ldr	r3, [pc, #148]	; (d5a88 <__register_exitproc+0xb8>)
   d59f4:	b113      	cbz	r3, d59fc <__register_exitproc+0x2c>
   d59f6:	681b      	ldr	r3, [r3, #0]
   d59f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d59fc:	6863      	ldr	r3, [r4, #4]
   d59fe:	2b1f      	cmp	r3, #31
   d5a00:	dd07      	ble.n	d5a12 <__register_exitproc+0x42>
   d5a02:	f8d8 0000 	ldr.w	r0, [r8]
   d5a06:	f000 f847 	bl	d5a98 <__retarget_lock_release_recursive>
   d5a0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5a12:	b34e      	cbz	r6, d5a68 <__register_exitproc+0x98>
   d5a14:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d5a18:	b988      	cbnz	r0, d5a3e <__register_exitproc+0x6e>
   d5a1a:	4b1c      	ldr	r3, [pc, #112]	; (d5a8c <__register_exitproc+0xbc>)
   d5a1c:	b923      	cbnz	r3, d5a28 <__register_exitproc+0x58>
   d5a1e:	f8d8 0000 	ldr.w	r0, [r8]
   d5a22:	f000 f838 	bl	d5a96 <__retarget_lock_release>
   d5a26:	e7f0      	b.n	d5a0a <__register_exitproc+0x3a>
   d5a28:	f44f 7084 	mov.w	r0, #264	; 0x108
   d5a2c:	f7fe fe9e 	bl	d476c <malloc>
   d5a30:	2800      	cmp	r0, #0
   d5a32:	d0f4      	beq.n	d5a1e <__register_exitproc+0x4e>
   d5a34:	2300      	movs	r3, #0
   d5a36:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d5a3a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d5a3e:	6863      	ldr	r3, [r4, #4]
   d5a40:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d5a44:	2201      	movs	r2, #1
   d5a46:	409a      	lsls	r2, r3
   d5a48:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d5a4c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d5a50:	4313      	orrs	r3, r2
   d5a52:	2e02      	cmp	r6, #2
   d5a54:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d5a58:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d5a5c:	bf02      	ittt	eq
   d5a5e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d5a62:	431a      	orreq	r2, r3
   d5a64:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d5a68:	6863      	ldr	r3, [r4, #4]
   d5a6a:	f8d8 0000 	ldr.w	r0, [r8]
   d5a6e:	1c5a      	adds	r2, r3, #1
   d5a70:	3302      	adds	r3, #2
   d5a72:	6062      	str	r2, [r4, #4]
   d5a74:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d5a78:	f000 f80e 	bl	d5a98 <__retarget_lock_release_recursive>
   d5a7c:	2000      	movs	r0, #0
   d5a7e:	e7c6      	b.n	d5a0e <__register_exitproc+0x3e>
   d5a80:	2003e7e0 	.word	0x2003e7e0
   d5a84:	2003e754 	.word	0x2003e754
   d5a88:	00000000 	.word	0x00000000
   d5a8c:	000d476d 	.word	0x000d476d
   d5a90:	2003e584 	.word	0x2003e584

000d5a94 <__retarget_lock_acquire_recursive>:
   d5a94:	4770      	bx	lr

000d5a96 <__retarget_lock_release>:
   d5a96:	4770      	bx	lr

000d5a98 <__retarget_lock_release_recursive>:
   d5a98:	4770      	bx	lr

000d5a9a <link_code_end>:
	...

000d5a9c <dynalib_user>:
   d5a9c:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5aac:	0000 0000 6554 706d 203a 6425 202c 7548     ....Temp: %d, Hu
   d5abc:	3a6d 2520 0064 6574 706d 6800 6d75 0000     m: %d.temp.hum..

000d5acc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5ad4:	4829 000d 482f 000d 487f 000d 483d 000d     )H../H...H..=H..
   d5ae4:	482b 000d                                   +H..

000d5ae8 <_ZTVN5spark13EthernetClassE>:
	...
   d5af0:	4df7 000d 4ded 000d 4de3 000d 4dd9 000d     .M...M...M...M..
   d5b00:	4dcd 000d 4dc1 000d 4fcd 000d 4fd5 000d     .M...M...O...O..
   d5b10:	4db5 000d 4dad 000d 4da3 000d 4d99 000d     .M...M...M...M..
   d5b20:	5005 000d                                   .P..

000d5b24 <_ZTV7TwoWire>:
	...
   d5b2c:	4e15 000d 4e5f 000d 4e37 000d 4e17 000d     .N.._N..7N...N..
   d5b3c:	4e3f 000d 4e47 000d 4e4f 000d 4e57 000d     ?N..GN..ON..WN..

000d5b4c <_ZTV9IPAddress>:
	...
   d5b54:	4ea9 000d 4e99 000d 4e9b 000d 7061 0070     .N...N...N..app.

000d5b64 <_ZTVN5spark12NetworkClassE>:
	...
   d5b6c:	4f8d 000d 4f97 000d 4fa1 000d 4fab 000d     .O...O...O...O..
   d5b7c:	4fb5 000d 4fc1 000d 4fcd 000d 4fd5 000d     .O...O...O...O..
   d5b8c:	4fdd 000d 4fe9 000d 4ff1 000d 4ffb 000d     .O...O...O...O..
   d5b9c:	5005 000d 5925 252d 2d6d 6425 2554 3a48     .P..%Y-%m-%dT%H:
   d5bac:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d5bbc <_ZTV11USARTSerial>:
	...
   d5bc4:	5331 000d 539f 000d 5377 000d 50ed 000d     1S...S..wS...P..
   d5bd4:	5347 000d 5363 000d 5355 000d 5371 000d     GS..cS..US..qS..
   d5be4:	5333 000d 5339 000d                         3S..9S..

000d5bec <_ZTV9USBSerial>:
	...
   d5bf4:	542b 000d 5493 000d 5469 000d 50ed 000d     +T...T..iT...P..
   d5c04:	545b 000d 542d 000d 543d 000d 548d 000d     [T..-T..=T...T..
   d5c14:	544d 000d 5425 000d                         MT..%T..

000d5c1c <_ZTVN5spark9WiFiClassE>:
	...
   d5c24:	558b 000d 5581 000d 5577 000d 552d 000d     .U...U..wU..-U..
   d5c34:	556b 000d 555f 000d 4fcd 000d 4fd5 000d     kU.._U...O...O..
   d5c44:	5553 000d 554b 000d 5541 000d 5537 000d     SU..KU..AU..7U..
   d5c54:	5005 000d                                   .P..

000d5c58 <_ZSt7nothrow>:
	...

000d5c59 <link_const_variable_data_end>:
   d5c59:	00          	.byte	0x00
	...

000d5c5c <link_constructors_location>:
   d5c5c:	000d41c1 	.word	0x000d41c1
   d5c60:	000d4819 	.word	0x000d4819
   d5c64:	000d4e01 	.word	0x000d4e01
   d5c68:	000d4f7d 	.word	0x000d4f7d
   d5c6c:	000d50d9 	.word	0x000d50d9
   d5c70:	000d51f9 	.word	0x000d51f9
   d5c74:	000d52f9 	.word	0x000d52f9
   d5c78:	000d531d 	.word	0x000d531d
   d5c7c:	000d5595 	.word	0x000d5595
